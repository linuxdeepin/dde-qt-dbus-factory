/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.Network.ConnectionSession.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Network.ConnectionSessionAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Network.ConnectionSession.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DAEMON_NETWORK_CONNECTIONSESSIONADAPTOR_H
#define COM_DEEPIN_DAEMON_NETWORK_CONNECTIONSESSIONADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Network.ConnectionSession.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.daemon.ConnectionSession
 */
class ConnectionSessionAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.daemon.ConnectionSession")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.daemon.ConnectionSession\">\n"
"    <method name=\"Close\"/>\n"
"    <method name=\"DebugGetConnectionData\">\n"
"      <arg direction=\"out\" type=\"a{sa{sv}}\"/>\n"
"      <annotation value=\"NetworkConnectionData\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"DebugGetErrors\">\n"
"      <arg direction=\"out\" type=\"a{sa{ss}}\"/>\n"
"      <annotation value=\"NetworkErrors\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"DebugListKeyDetail\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"GetAllKeys\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"GetAvailableValues\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"GetKey\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"GetKeyName\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"IsDefaultExpandedSection\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"ListAvailableKeyDetail\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"Save\">\n"
"      <arg direction=\"in\" type=\"b\"/>\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"SetKey\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"SetKeyFd\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"h\"/>\n"
"    </method>\n"
"    <signal name=\"ConnectionDataChanged\"/>\n"
"    <property access=\"read\" type=\"o\" name=\"ConnectionPath\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"Uuid\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"Type\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"AllowDelete\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"AllowEditConnectionId\"/>\n"
"    <property access=\"read\" type=\"as\" name=\"AvailableVirtualSections\"/>\n"
"    <property access=\"read\" type=\"as\" name=\"AvailableSections\"/>\n"
"    <property access=\"read\" type=\"a{sas}\" name=\"AvailableKeys\">\n"
"      <annotation value=\"NetworkAvailableKeys\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"a{sa{ss}}\" name=\"Errors\">\n"
"      <annotation value=\"NetworkErrors\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"  </interface>\n"
        "")
public:
    ConnectionSessionAdaptor(QObject *parent);
    virtual ~ConnectionSessionAdaptor();

public: // PROPERTIES
    Q_PROPERTY(bool AllowDelete READ allowDelete)
    bool allowDelete() const;

    Q_PROPERTY(bool AllowEditConnectionId READ allowEditConnectionId)
    bool allowEditConnectionId() const;

    Q_PROPERTY(NetworkAvailableKeys AvailableKeys READ availableKeys)
    NetworkAvailableKeys availableKeys() const;

    Q_PROPERTY(QStringList AvailableSections READ availableSections)
    QStringList availableSections() const;

    Q_PROPERTY(QStringList AvailableVirtualSections READ availableVirtualSections)
    QStringList availableVirtualSections() const;

    Q_PROPERTY(QDBusObjectPath ConnectionPath READ connectionPath)
    QDBusObjectPath connectionPath() const;

    Q_PROPERTY(NetworkErrors Errors READ errors)
    NetworkErrors errors() const;

    Q_PROPERTY(QString Type READ type)
    QString type() const;

    Q_PROPERTY(QString Uuid READ uuid)
    QString uuid() const;

public Q_SLOTS: // METHODS
    void Close();
    NetworkConnectionData DebugGetConnectionData();
    NetworkErrors DebugGetErrors();
    QString DebugListKeyDetail();
    QString GetAllKeys();
    QString GetAvailableValues(const QString &in0, const QString &in1);
    QString GetKey(const QString &in0, const QString &in1);
    QString GetKeyName(const QString &in0, const QString &in1);
    bool IsDefaultExpandedSection(const QString &in0);
    QString ListAvailableKeyDetail();
    bool Save(bool in0);
    void SetKey(const QString &in0, const QString &in1, const QString &in2);
    QDBusUnixFileDescriptor SetKeyFd(const QString &in0, const QString &in1);
Q_SIGNALS: // SIGNALS
    void ConnectionDataChanged();
};

#endif
