/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.SystemInfo.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.SystemInfoAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.SystemInfo.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DAEMON_SYSTEMINFOADAPTOR_H
#define COM_DEEPIN_DAEMON_SYSTEMINFOADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.SystemInfo.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.daemon.SystemInfo
 */
class SystemInfoAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.daemon.SystemInfo")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.daemon.SystemInfo\">\n"
"    <property access=\"read\" type=\"s\" name=\"Version\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"DistroID\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"DistroDesc\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"DistroVer\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"Processor\"/>\n"
"    <property access=\"read\" type=\"t\" name=\"DiskCap\"/>\n"
"    <property access=\"read\" type=\"t\" name=\"MemoryCap\"/>\n"
"    <property access=\"read\" type=\"x\" name=\"SystemType\"/>\n"
"  </interface>\n"
        "")
public:
    SystemInfoAdaptor(QObject *parent);
    virtual ~SystemInfoAdaptor();

public: // PROPERTIES
    Q_PROPERTY(qulonglong DiskCap READ diskCap)
    qulonglong diskCap() const;

    Q_PROPERTY(QString DistroDesc READ distroDesc)
    QString distroDesc() const;

    Q_PROPERTY(QString DistroID READ distroID)
    QString distroID() const;

    Q_PROPERTY(QString DistroVer READ distroVer)
    QString distroVer() const;

    Q_PROPERTY(qulonglong MemoryCap READ memoryCap)
    qulonglong memoryCap() const;

    Q_PROPERTY(QString Processor READ processor)
    QString processor() const;

    Q_PROPERTY(qlonglong SystemType READ systemType)
    qlonglong systemType() const;

    Q_PROPERTY(QString Version READ version)
    QString version() const;

public Q_SLOTS: // METHODS
Q_SIGNALS: // SIGNALS
};

#endif
