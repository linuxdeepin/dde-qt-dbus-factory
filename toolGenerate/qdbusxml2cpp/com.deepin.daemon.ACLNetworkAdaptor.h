/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.ACLNetwork.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.ACLNetworkAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.ACLNetwork.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DAEMON_ACLNETWORKADAPTOR_H
#define COM_DEEPIN_DAEMON_ACLNETWORKADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.ACLNetwork.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.daemon.ACL.Network
 */
class NetworkAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.daemon.ACL.Network")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.daemon.ACL.Network\">\n"
"    <method name=\"Enable\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"id\"/>\n"
"      <arg direction=\"in\" type=\"b\" name=\"enabled\"/>\n"
"    </method>\n"
"    <method name=\"Register\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"handler\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"pid\"/>\n"
"      <arg direction=\"in\" type=\"u\" name=\"timeout\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"result\"/>\n"
"    </method>\n"
"    <method name=\"Unregister\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"handler\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"pid\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"result\"/>\n"
"    </method>\n"
"    <signal name=\"AccessRequest\">\n"
"      <arg type=\"s\" name=\"id\"/>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    NetworkAdaptor(QObject *parent);
    virtual ~NetworkAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void Enable(const QString &id, bool enabled);
    bool Register(const QString &handler, int pid, uint timeout);
    bool Unregister(const QString &handler, int pid);
Q_SIGNALS: // SIGNALS
    void AccessRequest(const QString &id);
};

#endif
