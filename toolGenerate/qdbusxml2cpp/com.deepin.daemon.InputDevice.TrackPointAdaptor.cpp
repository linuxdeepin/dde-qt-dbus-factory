/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.InputDevice.TrackPoint.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TrackPointAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TrackPoint.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TrackPointAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class TrackPointAdaptor
 */

TrackPointAdaptor::TrackPointAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

TrackPointAdaptor::~TrackPointAdaptor()
{
    // destructor
}

QString TrackPointAdaptor::deviceList() const
{
    // get the value of property DeviceList
    return qvariant_cast< QString >(parent()->property("DeviceList"));
}

bool TrackPointAdaptor::exist() const
{
    // get the value of property Exist
    return qvariant_cast< bool >(parent()->property("Exist"));
}

bool TrackPointAdaptor::leftHanded() const
{
    // get the value of property LeftHanded
    return qvariant_cast< bool >(parent()->property("LeftHanded"));
}

void TrackPointAdaptor::setLeftHanded(bool value)
{
    // set the value of property LeftHanded
    parent()->setProperty("LeftHanded", QVariant::fromValue(value));
}

bool TrackPointAdaptor::middleButtonEnabled() const
{
    // get the value of property MiddleButtonEnabled
    return qvariant_cast< bool >(parent()->property("MiddleButtonEnabled"));
}

void TrackPointAdaptor::setMiddleButtonEnabled(bool value)
{
    // set the value of property MiddleButtonEnabled
    parent()->setProperty("MiddleButtonEnabled", QVariant::fromValue(value));
}

int TrackPointAdaptor::middleButtonTimeout() const
{
    // get the value of property MiddleButtonTimeout
    return qvariant_cast< int >(parent()->property("MiddleButtonTimeout"));
}

void TrackPointAdaptor::setMiddleButtonTimeout(int value)
{
    // set the value of property MiddleButtonTimeout
    parent()->setProperty("MiddleButtonTimeout", QVariant::fromValue(value));
}

double TrackPointAdaptor::motionAcceleration() const
{
    // get the value of property MotionAcceleration
    return qvariant_cast< double >(parent()->property("MotionAcceleration"));
}

void TrackPointAdaptor::setMotionAcceleration(double value)
{
    // set the value of property MotionAcceleration
    parent()->setProperty("MotionAcceleration", QVariant::fromValue(value));
}

double TrackPointAdaptor::motionScaling() const
{
    // get the value of property MotionScaling
    return qvariant_cast< double >(parent()->property("MotionScaling"));
}

void TrackPointAdaptor::setMotionScaling(double value)
{
    // set the value of property MotionScaling
    parent()->setProperty("MotionScaling", QVariant::fromValue(value));
}

double TrackPointAdaptor::motionThreshold() const
{
    // get the value of property MotionThreshold
    return qvariant_cast< double >(parent()->property("MotionThreshold"));
}

void TrackPointAdaptor::setMotionThreshold(double value)
{
    // set the value of property MotionThreshold
    parent()->setProperty("MotionThreshold", QVariant::fromValue(value));
}

bool TrackPointAdaptor::wheelEmulation() const
{
    // get the value of property WheelEmulation
    return qvariant_cast< bool >(parent()->property("WheelEmulation"));
}

void TrackPointAdaptor::setWheelEmulation(bool value)
{
    // set the value of property WheelEmulation
    parent()->setProperty("WheelEmulation", QVariant::fromValue(value));
}

int TrackPointAdaptor::wheelEmulationButton() const
{
    // get the value of property WheelEmulationButton
    return qvariant_cast< int >(parent()->property("WheelEmulationButton"));
}

void TrackPointAdaptor::setWheelEmulationButton(int value)
{
    // set the value of property WheelEmulationButton
    parent()->setProperty("WheelEmulationButton", QVariant::fromValue(value));
}

int TrackPointAdaptor::wheelEmulationTimeout() const
{
    // get the value of property WheelEmulationTimeout
    return qvariant_cast< int >(parent()->property("WheelEmulationTimeout"));
}

void TrackPointAdaptor::setWheelEmulationTimeout(int value)
{
    // set the value of property WheelEmulationTimeout
    parent()->setProperty("WheelEmulationTimeout", QVariant::fromValue(value));
}

bool TrackPointAdaptor::wheelHorizScroll() const
{
    // get the value of property WheelHorizScroll
    return qvariant_cast< bool >(parent()->property("WheelHorizScroll"));
}

void TrackPointAdaptor::setWheelHorizScroll(bool value)
{
    // set the value of property WheelHorizScroll
    parent()->setProperty("WheelHorizScroll", QVariant::fromValue(value));
}

void TrackPointAdaptor::Reset()
{
    // handle method call com.deepin.daemon.InputDevice.TrackPoint.Reset
    QMetaObject::invokeMethod(parent(), "Reset");
}

