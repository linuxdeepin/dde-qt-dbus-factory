/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.dde.daemon.Dock.Entry.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.Dock.EntryAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.Dock.Entry.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.Dock.EntryAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class EntryAdaptor
 */

EntryAdaptor::EntryAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

EntryAdaptor::~EntryAdaptor()
{
    // destructor
}

uint EntryAdaptor::currentWindow() const
{
    // get the value of property CurrentWindow
    return qvariant_cast< uint >(parent()->property("CurrentWindow"));
}

QString EntryAdaptor::desktopFile() const
{
    // get the value of property DesktopFile
    return qvariant_cast< QString >(parent()->property("DesktopFile"));
}

QString EntryAdaptor::icon() const
{
    // get the value of property Icon
    return qvariant_cast< QString >(parent()->property("Icon"));
}

QString EntryAdaptor::id() const
{
    // get the value of property Id
    return qvariant_cast< QString >(parent()->property("Id"));
}

bool EntryAdaptor::isActive() const
{
    // get the value of property IsActive
    return qvariant_cast< bool >(parent()->property("IsActive"));
}

bool EntryAdaptor::isDocked() const
{
    // get the value of property IsDocked
    return qvariant_cast< bool >(parent()->property("IsDocked"));
}

QString EntryAdaptor::menu() const
{
    // get the value of property Menu
    return qvariant_cast< QString >(parent()->property("Menu"));
}

QString EntryAdaptor::name() const
{
    // get the value of property Name
    return qvariant_cast< QString >(parent()->property("Name"));
}

WindowInfoMap EntryAdaptor::windowInfos() const
{
    // get the value of property WindowInfos
    return qvariant_cast< WindowInfoMap >(parent()->property("WindowInfos"));
}

void EntryAdaptor::Activate(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.Activate
    QMetaObject::invokeMethod(parent(), "Activate", Q_ARG(uint, in0));
}

void EntryAdaptor::Check()
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.Check
    QMetaObject::invokeMethod(parent(), "Check");
}

void EntryAdaptor::ForceQuit()
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.ForceQuit
    QMetaObject::invokeMethod(parent(), "ForceQuit");
}

WindowList EntryAdaptor::GetAllowedCloseWindows()
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.GetAllowedCloseWindows
    WindowList out0;
    QMetaObject::invokeMethod(parent(), "GetAllowedCloseWindows", Q_RETURN_ARG(WindowList, out0));
    return out0;
}

void EntryAdaptor::HandleDragDrop(uint in0, const QStringList &in1)
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.HandleDragDrop
    QMetaObject::invokeMethod(parent(), "HandleDragDrop", Q_ARG(uint, in0), Q_ARG(QStringList, in1));
}

void EntryAdaptor::HandleMenuItem(uint in0, const QString &in1)
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.HandleMenuItem
    QMetaObject::invokeMethod(parent(), "HandleMenuItem", Q_ARG(uint, in0), Q_ARG(QString, in1));
}

void EntryAdaptor::NewInstance(uint in0)
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.NewInstance
    QMetaObject::invokeMethod(parent(), "NewInstance", Q_ARG(uint, in0));
}

void EntryAdaptor::PresentWindows()
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.PresentWindows
    QMetaObject::invokeMethod(parent(), "PresentWindows");
}

void EntryAdaptor::RequestDock()
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.RequestDock
    QMetaObject::invokeMethod(parent(), "RequestDock");
}

void EntryAdaptor::RequestUndock()
{
    // handle method call com.deepin.dde.daemon.Dock.Entry.RequestUndock
    QMetaObject::invokeMethod(parent(), "RequestUndock");
}

