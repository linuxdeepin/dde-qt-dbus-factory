/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.defender.antiav.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.antiavAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.antiav.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DEFENDER_ANTIAVADAPTOR_H
#define COM_DEEPIN_DEFENDER_ANTIAVADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.antiav.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.defender.antiav
 */
class AntiavAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.defender.antiav")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.defender.antiav\">\n"
"    <property access=\"read\" type=\"d\" name=\"globalRecv\"/>\n"
"    <signal name=\"NotifyDetailData\">\n"
"      <arg type=\"s\" name=\"name\"/>\n"
"      <arg type=\"d\" name=\"recv\"/>\n"
"      <arg type=\"d\" name=\"send\"/>\n"
"      <arg type=\"i\" name=\"pid\"/>\n"
"      <arg type=\"s\" name=\"device\"/>\n"
"      <arg type=\"s\" name=\"type\"/>\n"
"    </signal>\n"
"    <signal name=\"NotifyGlobalData\">\n"
"      <arg type=\"d\" name=\"recv\"/>\n"
"      <arg type=\"d\" name=\"send\"/>\n"
"    </signal>\n"
"    <method name=\"StartApp\"/>\n"
"    <method name=\"ExitApp\"/>\n"
"    <signal name=\"NotifyHeartbeat\"/>\n"
"    <method name=\"preInitialize\"/>\n"
"    <method name=\"doDissection\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"bAllDissection\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sDissectionPath\"/>\n"
"    </method>\n"
"    <method name=\"setDissection\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"eState\"/>\n"
"    </method>\n"
"    <method name=\"repairProblemFile\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPath\"/>\n"
"    </method>\n"
"    <method name=\"reposeProblemFile\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"bFlag\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPath\"/>\n"
"    </method>\n"
"    <method name=\"sepProblemFile\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"bFlag\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPath\"/>\n"
"    </method>\n"
"    <method name=\"queryReposeFile\"/>\n"
"    <method name=\"querySepFile\"/>\n"
"    <method name=\"queryVersion\"/>\n"
"    <method name=\"updateVersion\"/>\n"
"    <method name=\"isScanning\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"flag\"/>\n"
"    </method>\n"
"    <method name=\"isTrueScanning\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"flag\"/>\n"
"    </method>\n"
"    <method name=\"getVdbVersion\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"version\"/>\n"
"    </method>\n"
"    <method name=\"backgroundUpdate\"/>\n"
"    <method name=\"scanThreatsFile\"/>\n"
"    <method name=\"SetIsbInVirusScanningPage\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"isbOn\"/>\n"
"    </method>\n"
"    <method name=\"setScanStart\"/>\n"
"    <signal name=\"onDissectionResult\">\n"
"      <arg type=\"s\" name=\"sPath\"/>\n"
"      <arg type=\"d\" name=\"dProgress\"/>\n"
"      <arg type=\"i\" name=\"eType\"/>\n"
"      <arg type=\"s\" name=\"sDetailInfo\"/>\n"
"    </signal>\n"
"    <signal name=\"onSetDissectionStateResult\">\n"
"      <arg type=\"s\" name=\"sPath\"/>\n"
"      <arg type=\"s\" name=\"sMessage\"/>\n"
"    </signal>\n"
"    <signal name=\"onRepairProblemFileResult\">\n"
"      <arg type=\"s\" name=\"sPath\"/>\n"
"      <arg type=\"s\" name=\"sMessage\"/>\n"
"    </signal>\n"
"    <signal name=\"onReposeProblemFileResult\">\n"
"      <arg type=\"s\" name=\"sPath\"/>\n"
"      <arg type=\"s\" name=\"sMessage\"/>\n"
"    </signal>\n"
"    <signal name=\"onSepProblemFileResult\">\n"
"      <arg type=\"s\" name=\"sPath\"/>\n"
"      <arg type=\"s\" name=\"sMessage\"/>\n"
"    </signal>\n"
"    <signal name=\"signal_onQueryReposeFile\">\n"
"      <arg type=\"s\" name=\"fileinfo\"/>\n"
"    </signal>\n"
"    <signal name=\"signal_onQuerySepFile\">\n"
"      <arg type=\"s\" name=\"fileinfo\"/>\n"
"    </signal>\n"
"    <signal name=\"signal_doDissectionFinished\"/>\n"
"    <signal name=\"signal_doQueryVersion\">\n"
"      <arg type=\"s\" name=\"version\"/>\n"
"    </signal>\n"
"    <signal name=\"signal_UpdateVersionResult\">\n"
"      <arg type=\"b\" name=\"flag\"/>\n"
"    </signal>\n"
"    <signal name=\"onBackgroundUpdate\"/>\n"
"    <signal name=\"onSendScanStart\"/>\n"
"    <signal name=\"onRequstScanThreatsFile\"/>\n"
"    <method name=\"SetScanFileSize\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"nSize\"/>\n"
"    </method>\n"
"    <method name=\"QueryVersion\"/>\n"
"    <method name=\"UpdateVersion\"/>\n"
"    <method name=\"SetScanStatus\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"status\"/>\n"
"    </method>\n"
"    <method name=\"GetScanStatus\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"status\"/>\n"
"    </method>\n"
"    <method name=\"DoDissection\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"bAllDissection\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sDissectionPath\"/>\n"
"    </method>\n"
"    <method name=\"RepairProblemFile\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPath\"/>\n"
"    </method>\n"
"    <method name=\"TrustProblemFile\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"bFlag\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPath\"/>\n"
"    </method>\n"
"    <method name=\"IsolationProblemFile\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"bFlag\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPath\"/>\n"
"    </method>\n"
"    <method name=\"QueryTrustFiles\"/>\n"
"    <method name=\"QueryIsolationFiles\"/>\n"
"    <method name=\"SelectTrustAreaSize\"/>\n"
"    <method name=\"SelectIsolationAreaSize\"/>\n"
"    <method name=\"SetVriusUpdateAddress\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"address\"/>\n"
"    </method>\n"
"    <signal name=\"SendSrvVersion\">\n"
"      <arg type=\"s\" name=\"version\"/>\n"
"    </signal>\n"
"    <signal name=\"SendUpdateVersionResult\">\n"
"      <arg type=\"b\" name=\"result\"/>\n"
"    </signal>\n"
"    <signal name=\"DissectionFinished\"/>\n"
"    <signal name=\"SendDissectionProgInfo\">\n"
"      <arg type=\"s\" name=\"path\"/>\n"
"      <arg type=\"d\" name=\"progress\"/>\n"
"      <arg type=\"i\" name=\"type\"/>\n"
"      <arg type=\"s\" name=\"sDetailInfo\"/>\n"
"    </signal>\n"
"    <signal name=\"SetScanStatusFinished\">\n"
"      <arg type=\"i\" name=\"status\"/>\n"
"    </signal>\n"
"    <signal name=\"SendOperationRepairFileResult\">\n"
"      <arg type=\"s\" name=\"file\"/>\n"
"    </signal>\n"
"    <signal name=\"SendOperationTrustFileResult\">\n"
"      <arg type=\"s\" name=\"file\"/>\n"
"    </signal>\n"
"    <signal name=\"SendOperationIsolationFileResult\">\n"
"      <arg type=\"s\" name=\"file\"/>\n"
"    </signal>\n"
"    <signal name=\"SendQueryTrustFiles\">\n"
"      <arg type=\"s\" name=\"files\"/>\n"
"    </signal>\n"
"    <signal name=\"SendQueryIsolationFiles\">\n"
"      <arg type=\"s\" name=\"files\"/>\n"
"    </signal>\n"
"    <signal name=\"SendTrustAreaSize\">\n"
"      <arg type=\"i\" name=\"size\"/>\n"
"    </signal>\n"
"    <signal name=\"SendIsolationAreaSize\">\n"
"      <arg type=\"i\" name=\"size\"/>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    AntiavAdaptor(QObject *parent);
    virtual ~AntiavAdaptor();

public: // PROPERTIES
    Q_PROPERTY(double globalRecv READ globalRecv)
    double globalRecv() const;

public Q_SLOTS: // METHODS
    void DoDissection(bool bAllDissection, const QString &sDissectionPath);
    void ExitApp();
    int GetScanStatus();
    void IsolationProblemFile(bool bFlag, const QString &sPath);
    void QueryIsolationFiles();
    void QueryTrustFiles();
    void QueryVersion();
    void RepairProblemFile(const QString &sPath);
    void SelectIsolationAreaSize();
    void SelectTrustAreaSize();
    void SetIsbInVirusScanningPage(bool isbOn);
    void SetScanFileSize(int nSize);
    void SetScanStatus(int status);
    void SetVriusUpdateAddress(const QString &address);
    void StartApp();
    void TrustProblemFile(bool bFlag, const QString &sPath);
    void UpdateVersion();
    void backgroundUpdate();
    void doDissection(bool bAllDissection, const QString &sDissectionPath);
    QString getVdbVersion();
    bool isScanning();
    bool isTrueScanning();
    void preInitialize();
    void queryReposeFile();
    void querySepFile();
    void queryVersion();
    void repairProblemFile(const QString &sPath);
    void reposeProblemFile(bool bFlag, const QString &sPath);
    void scanThreatsFile();
    void sepProblemFile(bool bFlag, const QString &sPath);
    void setDissection(int eState);
    void setScanStart();
    void updateVersion();
Q_SIGNALS: // SIGNALS
    void DissectionFinished();
    void NotifyDetailData(const QString &name, double recv, double send, int pid, const QString &device, const QString &type);
    void NotifyGlobalData(double recv, double send);
    void NotifyHeartbeat();
    void SendDissectionProgInfo(const QString &path, double progress, int type, const QString &sDetailInfo);
    void SendIsolationAreaSize(int size);
    void SendOperationIsolationFileResult(const QString &file);
    void SendOperationRepairFileResult(const QString &file);
    void SendOperationTrustFileResult(const QString &file);
    void SendQueryIsolationFiles(const QString &files);
    void SendQueryTrustFiles(const QString &files);
    void SendSrvVersion(const QString &version);
    void SendTrustAreaSize(int size);
    void SendUpdateVersionResult(bool result);
    void SetScanStatusFinished(int status);
    void onBackgroundUpdate();
    void onDissectionResult(const QString &sPath, double dProgress, int eType, const QString &sDetailInfo);
    void onRepairProblemFileResult(const QString &sPath, const QString &sMessage);
    void onReposeProblemFileResult(const QString &sPath, const QString &sMessage);
    void onRequstScanThreatsFile();
    void onSendScanStart();
    void onSepProblemFileResult(const QString &sPath, const QString &sMessage);
    void onSetDissectionStateResult(const QString &sPath, const QString &sMessage);
    void signal_UpdateVersionResult(bool flag);
    void signal_doDissectionFinished();
    void signal_doQueryVersion(const QString &version);
    void signal_onQueryReposeFile(const QString &fileinfo);
    void signal_onQuerySepFile(const QString &fileinfo);
};

#endif
