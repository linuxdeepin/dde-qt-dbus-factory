/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.Grub2.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Grub2Adaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Grub2.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Grub2Adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class Grub2Adaptor
 */

Grub2Adaptor::Grub2Adaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

Grub2Adaptor::~Grub2Adaptor()
{
    // destructor
}

QString Grub2Adaptor::defaultEntry() const
{
    // get the value of property DefaultEntry
    return qvariant_cast< QString >(parent()->property("DefaultEntry"));
}

bool Grub2Adaptor::enableTheme() const
{
    // get the value of property EnableTheme
    return qvariant_cast< bool >(parent()->property("EnableTheme"));
}

QString Grub2Adaptor::resolution() const
{
    // get the value of property Resolution
    return qvariant_cast< QString >(parent()->property("Resolution"));
}

QString Grub2Adaptor::theme() const
{
    // get the value of property Theme
    return qvariant_cast< QString >(parent()->property("Theme"));
}

uint Grub2Adaptor::timeout() const
{
    // get the value of property Timeout
    return qvariant_cast< uint >(parent()->property("Timeout"));
}

bool Grub2Adaptor::updating() const
{
    // get the value of property Updating
    return qvariant_cast< bool >(parent()->property("Updating"));
}

QString Grub2Adaptor::GetAvailableResolutions()
{
    // handle method call com.deepin.daemon.Grub2.GetAvailableResolutions
    QString modeJSON;
    QMetaObject::invokeMethod(parent(), "GetAvailableResolutions", Q_RETURN_ARG(QString, modeJSON));
    return modeJSON;
}

QStringList Grub2Adaptor::GetSimpleEntryTitles()
{
    // handle method call com.deepin.daemon.Grub2.GetSimpleEntryTitles
    QStringList titles;
    QMetaObject::invokeMethod(parent(), "GetSimpleEntryTitles", Q_RETURN_ARG(QStringList, titles));
    return titles;
}

QString Grub2Adaptor::GetThemes()
{
    // handle method call com.deepin.daemon.Grub2.GetThemes
    QString themes;
    QMetaObject::invokeMethod(parent(), "GetThemes", Q_RETURN_ARG(QString, themes));
    return themes;
}

void Grub2Adaptor::Reset()
{
    // handle method call com.deepin.daemon.Grub2.Reset
    QMetaObject::invokeMethod(parent(), "Reset");
}

void Grub2Adaptor::SetDefaultEntry(const QString &entry)
{
    // handle method call com.deepin.daemon.Grub2.SetDefaultEntry
    QMetaObject::invokeMethod(parent(), "SetDefaultEntry", Q_ARG(QString, entry));
}

void Grub2Adaptor::SetEnableTheme(bool enabled)
{
    // handle method call com.deepin.daemon.Grub2.SetEnableTheme
    QMetaObject::invokeMethod(parent(), "SetEnableTheme", Q_ARG(bool, enabled));
}

void Grub2Adaptor::SetResolution(const QString &resolution)
{
    // handle method call com.deepin.daemon.Grub2.SetResolution
    QMetaObject::invokeMethod(parent(), "SetResolution", Q_ARG(QString, resolution));
}

void Grub2Adaptor::SetTheme(const QString &themeId)
{
    // handle method call com.deepin.daemon.Grub2.SetTheme
    QMetaObject::invokeMethod(parent(), "SetTheme", Q_ARG(QString, themeId));
}

void Grub2Adaptor::SetTimeout(uint timeout)
{
    // handle method call com.deepin.daemon.Grub2.SetTimeout
    QMetaObject::invokeMethod(parent(), "SetTimeout", Q_ARG(uint, timeout));
}

