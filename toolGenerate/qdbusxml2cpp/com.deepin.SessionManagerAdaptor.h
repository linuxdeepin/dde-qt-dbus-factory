/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.SessionManager.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.SessionManagerAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.SessionManager.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_SESSIONMANAGERADAPTOR_H
#define COM_DEEPIN_SESSIONMANAGERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.SessionManager.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.SessionManager
 */
class SessionManagerAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.SessionManager")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.SessionManager\">\n"
"    <method name=\"AllowSessionDaemonRun\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"CanHibernate\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"CanLogout\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"CanReboot\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"CanShutdown\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"CanSuspend\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"ForceLogout\"/>\n"
"    <method name=\"ForceReboot\"/>\n"
"    <method name=\"ForceShutdown\"/>\n"
"    <method name=\"Logout\"/>\n"
"    <method name=\"PowerOffChoose\"/>\n"
"    <method name=\"Reboot\"/>\n"
"    <method name=\"Register\">\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"RequestHibernate\"/>\n"
"    <method name=\"RequestLock\"/>\n"
"    <method name=\"RequestLogout\"/>\n"
"    <method name=\"RequestReboot\"/>\n"
"    <method name=\"RequestShutdown\"/>\n"
"    <method name=\"RequestSuspend\"/>\n"
"    <method name=\"SetLocked\">\n"
"      <arg direction=\"in\" type=\"b\"/>\n"
"    </method>\n"
"    <method name=\"Shutdown\"/>\n"
"    <method name=\"ToggleDebug\"/>\n"
"    <signal name=\"Unlock\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"Locked\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"CurrentUid\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"Stage\"/>\n"
"  </interface>\n"
        "")
public:
    SessionManagerAdaptor(QObject *parent);
    virtual ~SessionManagerAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QString CurrentUid READ currentUid)
    QString currentUid() const;

    Q_PROPERTY(bool Locked READ locked)
    bool locked() const;

    Q_PROPERTY(int Stage READ stage)
    int stage() const;

public Q_SLOTS: // METHODS
    bool AllowSessionDaemonRun();
    bool CanHibernate();
    bool CanLogout();
    bool CanReboot();
    bool CanShutdown();
    bool CanSuspend();
    void ForceLogout();
    void ForceReboot();
    void ForceShutdown();
    void Logout();
    void PowerOffChoose();
    void Reboot();
    bool Register(const QString &in0);
    void RequestHibernate();
    void RequestLock();
    void RequestLogout();
    void RequestReboot();
    void RequestShutdown();
    void RequestSuspend();
    void SetLocked(bool in0);
    void Shutdown();
    void ToggleDebug();
Q_SIGNALS: // SIGNALS
    void Unlock();
};

#endif
