/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.defender.analysisapp.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.analysisappAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.analysisapp.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.analysisappAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class AnalysisappAdaptor
 */

AnalysisappAdaptor::AnalysisappAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

AnalysisappAdaptor::~AnalysisappAdaptor()
{
    // destructor
}

DefenderProcessList AnalysisappAdaptor::allProcPidList() const
{
    // get the value of property allProcPidList
    return qvariant_cast< DefenderProcessList >(parent()->property("allProcPidList"));
}

DefenderProcessInfo AnalysisappAdaptor::processInfo() const
{
    // get the value of property processInfo
    return qvariant_cast< DefenderProcessInfo >(parent()->property("processInfo"));
}

void AnalysisappAdaptor::ExitApp()
{
    // handle method call com.deepin.defender.analysisapp.ExitApp
    QMetaObject::invokeMethod(parent(), "ExitApp");
}

void AnalysisappAdaptor::StartApp()
{
    // handle method call com.deepin.defender.analysisapp.StartApp
    QMetaObject::invokeMethod(parent(), "StartApp");
}

QString AnalysisappAdaptor::getProcessEnvironmentVariable(int pid, const QString &environmentname)
{
    // handle method call com.deepin.defender.analysisapp.getProcessEnvironmentVariable
    QString out0;
    QMetaObject::invokeMethod(parent(), "getProcessEnvironmentVariable", Q_RETURN_ARG(QString, out0), Q_ARG(int, pid), Q_ARG(QString, environmentname));
    return out0;
}

