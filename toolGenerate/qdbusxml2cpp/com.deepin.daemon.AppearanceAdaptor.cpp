/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.Appearance.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.AppearanceAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Appearance.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.AppearanceAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class AppearanceAdaptor
 */

AppearanceAdaptor::AppearanceAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

AppearanceAdaptor::~AppearanceAdaptor()
{
    // destructor
}

QString AppearanceAdaptor::background() const
{
    // get the value of property Background
    return qvariant_cast< QString >(parent()->property("Background"));
}

void AppearanceAdaptor::setBackground(const QString &value)
{
    // set the value of property Background
    parent()->setProperty("Background", QVariant::fromValue(value));
}

QString AppearanceAdaptor::cursorTheme() const
{
    // get the value of property CursorTheme
    return qvariant_cast< QString >(parent()->property("CursorTheme"));
}

void AppearanceAdaptor::setCursorTheme(const QString &value)
{
    // set the value of property CursorTheme
    parent()->setProperty("CursorTheme", QVariant::fromValue(value));
}

double AppearanceAdaptor::fontSize() const
{
    // get the value of property FontSize
    return qvariant_cast< double >(parent()->property("FontSize"));
}

void AppearanceAdaptor::setFontSize(double value)
{
    // set the value of property FontSize
    parent()->setProperty("FontSize", QVariant::fromValue(value));
}

QString AppearanceAdaptor::globalTheme() const
{
    // get the value of property GlobalTheme
    return qvariant_cast< QString >(parent()->property("GlobalTheme"));
}

QString AppearanceAdaptor::gtkTheme() const
{
    // get the value of property GtkTheme
    return qvariant_cast< QString >(parent()->property("GtkTheme"));
}

void AppearanceAdaptor::setGtkTheme(const QString &value)
{
    // set the value of property GtkTheme
    parent()->setProperty("GtkTheme", QVariant::fromValue(value));
}

QString AppearanceAdaptor::iconTheme() const
{
    // get the value of property IconTheme
    return qvariant_cast< QString >(parent()->property("IconTheme"));
}

void AppearanceAdaptor::setIconTheme(const QString &value)
{
    // set the value of property IconTheme
    parent()->setProperty("IconTheme", QVariant::fromValue(value));
}

QString AppearanceAdaptor::monospaceFont() const
{
    // get the value of property MonospaceFont
    return qvariant_cast< QString >(parent()->property("MonospaceFont"));
}

void AppearanceAdaptor::setMonospaceFont(const QString &value)
{
    // set the value of property MonospaceFont
    parent()->setProperty("MonospaceFont", QVariant::fromValue(value));
}

double AppearanceAdaptor::opacity() const
{
    // get the value of property Opacity
    return qvariant_cast< double >(parent()->property("Opacity"));
}

void AppearanceAdaptor::setOpacity(double value)
{
    // set the value of property Opacity
    parent()->setProperty("Opacity", QVariant::fromValue(value));
}

QString AppearanceAdaptor::qtActiveColor() const
{
    // get the value of property QtActiveColor
    return qvariant_cast< QString >(parent()->property("QtActiveColor"));
}

void AppearanceAdaptor::setQtActiveColor(const QString &value)
{
    // set the value of property QtActiveColor
    parent()->setProperty("QtActiveColor", QVariant::fromValue(value));
}

QString AppearanceAdaptor::standardFont() const
{
    // get the value of property StandardFont
    return qvariant_cast< QString >(parent()->property("StandardFont"));
}

void AppearanceAdaptor::setStandardFont(const QString &value)
{
    // set the value of property StandardFont
    parent()->setProperty("StandardFont", QVariant::fromValue(value));
}

QString AppearanceAdaptor::wallpaperSlideShow() const
{
    // get the value of property WallpaperSlideShow
    return qvariant_cast< QString >(parent()->property("WallpaperSlideShow"));
}

void AppearanceAdaptor::setWallpaperSlideShow(const QString &value)
{
    // set the value of property WallpaperSlideShow
    parent()->setProperty("WallpaperSlideShow", QVariant::fromValue(value));
}

void AppearanceAdaptor::Delete(const QString &in0, const QString &in1)
{
    // handle method call com.deepin.daemon.Appearance.Delete
    QMetaObject::invokeMethod(parent(), "Delete", Q_ARG(QString, in0), Q_ARG(QString, in1));
}

double AppearanceAdaptor::GetScaleFactor()
{
    // handle method call com.deepin.daemon.Appearance.GetScaleFactor
    double out0;
    QMetaObject::invokeMethod(parent(), "GetScaleFactor", Q_RETURN_ARG(double, out0));
    return out0;
}

QMap<QString,double> AppearanceAdaptor::GetScreenScaleFactors()
{
    // handle method call com.deepin.daemon.Appearance.GetScreenScaleFactors
    QMap<QString,double> scaleFactors;
    QMetaObject::invokeMethod(parent(), "GetScreenScaleFactors", Q_RETURN_ARG(QMap<QString,double>, scaleFactors));
    return scaleFactors;
}

QString AppearanceAdaptor::List(const QString &in0)
{
    // handle method call com.deepin.daemon.Appearance.List
    QString out0;
    QMetaObject::invokeMethod(parent(), "List", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0));
    return out0;
}

void AppearanceAdaptor::Set(const QString &in0, const QString &in1)
{
    // handle method call com.deepin.daemon.Appearance.Set
    QMetaObject::invokeMethod(parent(), "Set", Q_ARG(QString, in0), Q_ARG(QString, in1));
}

void AppearanceAdaptor::SetScaleFactor(double in0)
{
    // handle method call com.deepin.daemon.Appearance.SetScaleFactor
    QMetaObject::invokeMethod(parent(), "SetScaleFactor", Q_ARG(double, in0));
}

void AppearanceAdaptor::SetScreenScaleFactors(const QMap<QString,double> &scaleFactors)
{
    // handle method call com.deepin.daemon.Appearance.SetScreenScaleFactors
    QMetaObject::invokeMethod(parent(), "SetScreenScaleFactors", Q_ARG(QMap<QString,double>, scaleFactors));
}

QString AppearanceAdaptor::Show(const QString &in0, const QStringList &in1)
{
    // handle method call com.deepin.daemon.Appearance.Show
    QString out0;
    QMetaObject::invokeMethod(parent(), "Show", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0), Q_ARG(QStringList, in1));
    return out0;
}

QString AppearanceAdaptor::Thumbnail(const QString &in0, const QString &in1)
{
    // handle method call com.deepin.daemon.Appearance.Thumbnail
    QString out0;
    QMetaObject::invokeMethod(parent(), "Thumbnail", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

