/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/org.freedesktop.PolicyKit1.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/org.freedesktop.PolicyKit1Adaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/org.freedesktop.PolicyKit1.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/org.freedesktop.PolicyKit1Adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class AuthorityAdaptor
 */

AuthorityAdaptor::AuthorityAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

AuthorityAdaptor::~AuthorityAdaptor()
{
    // destructor
}

uint AuthorityAdaptor::backendFeatures() const
{
    // get the value of property BackendFeatures
    return qvariant_cast< uint >(parent()->property("BackendFeatures"));
}

QString AuthorityAdaptor::backendName() const
{
    // get the value of property BackendName
    return qvariant_cast< QString >(parent()->property("BackendName"));
}

QString AuthorityAdaptor::backendVersion() const
{
    // get the value of property BackendVersion
    return qvariant_cast< QString >(parent()->property("BackendVersion"));
}

void AuthorityAdaptor::CancelCheckAuthorization(const QString &cancellation_id)
{
    // handle method call org.freedesktop.PolicyKit1.Authority.CancelCheckAuthorization
    QMetaObject::invokeMethod(parent(), "CancelCheckAuthorization", Q_ARG(QString, cancellation_id));
}

PolicyResult AuthorityAdaptor::CheckAuthorization(PolicySubject subject, const QString &action_id, PolicyDetails details, uint flags, const QString &cancellation_id)
{
    // handle method call org.freedesktop.PolicyKit1.Authority.CheckAuthorization
    PolicyResult result;
    QMetaObject::invokeMethod(parent(), "CheckAuthorization", Q_RETURN_ARG(PolicyResult, result), Q_ARG(PolicySubject, subject), Q_ARG(QString, action_id), Q_ARG(PolicyDetails, details), Q_ARG(uint, flags), Q_ARG(QString, cancellation_id));
    return result;
}

void AuthorityAdaptor::RevokeTemporaryAuthorizationById(const QString &id)
{
    // handle method call org.freedesktop.PolicyKit1.Authority.RevokeTemporaryAuthorizationById
    QMetaObject::invokeMethod(parent(), "RevokeTemporaryAuthorizationById", Q_ARG(QString, id));
}

