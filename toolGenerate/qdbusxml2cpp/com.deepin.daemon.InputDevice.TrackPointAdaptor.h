/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.InputDevice.TrackPoint.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TrackPointAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TrackPoint.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DAEMON_INPUTDEVICE_TRACKPOINTADAPTOR_H
#define COM_DEEPIN_DAEMON_INPUTDEVICE_TRACKPOINTADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TrackPoint.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.daemon.InputDevice.TrackPoint
 */
class TrackPointAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.daemon.InputDevice.TrackPoint")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.daemon.InputDevice.TrackPoint\">\n"
"    <method name=\"Reset\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"MiddleButtonEnabled\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"WheelEmulation\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"WheelHorizScroll\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"MiddleButtonTimeout\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"WheelEmulationButton\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"WheelEmulationTimeout\"/>\n"
"    <property access=\"readwrite\" type=\"d\" name=\"MotionAcceleration\"/>\n"
"    <property access=\"readwrite\" type=\"d\" name=\"MotionThreshold\"/>\n"
"    <property access=\"readwrite\" type=\"d\" name=\"MotionScaling\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"DeviceList\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"LeftHanded\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"Exist\"/>\n"
"  </interface>\n"
        "")
public:
    TrackPointAdaptor(QObject *parent);
    virtual ~TrackPointAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QString DeviceList READ deviceList)
    QString deviceList() const;

    Q_PROPERTY(bool Exist READ exist)
    bool exist() const;

    Q_PROPERTY(bool LeftHanded READ leftHanded WRITE setLeftHanded)
    bool leftHanded() const;
    void setLeftHanded(bool value);

    Q_PROPERTY(bool MiddleButtonEnabled READ middleButtonEnabled WRITE setMiddleButtonEnabled)
    bool middleButtonEnabled() const;
    void setMiddleButtonEnabled(bool value);

    Q_PROPERTY(int MiddleButtonTimeout READ middleButtonTimeout WRITE setMiddleButtonTimeout)
    int middleButtonTimeout() const;
    void setMiddleButtonTimeout(int value);

    Q_PROPERTY(double MotionAcceleration READ motionAcceleration WRITE setMotionAcceleration)
    double motionAcceleration() const;
    void setMotionAcceleration(double value);

    Q_PROPERTY(double MotionScaling READ motionScaling WRITE setMotionScaling)
    double motionScaling() const;
    void setMotionScaling(double value);

    Q_PROPERTY(double MotionThreshold READ motionThreshold WRITE setMotionThreshold)
    double motionThreshold() const;
    void setMotionThreshold(double value);

    Q_PROPERTY(bool WheelEmulation READ wheelEmulation WRITE setWheelEmulation)
    bool wheelEmulation() const;
    void setWheelEmulation(bool value);

    Q_PROPERTY(int WheelEmulationButton READ wheelEmulationButton WRITE setWheelEmulationButton)
    int wheelEmulationButton() const;
    void setWheelEmulationButton(int value);

    Q_PROPERTY(int WheelEmulationTimeout READ wheelEmulationTimeout WRITE setWheelEmulationTimeout)
    int wheelEmulationTimeout() const;
    void setWheelEmulationTimeout(int value);

    Q_PROPERTY(bool WheelHorizScroll READ wheelHorizScroll WRITE setWheelHorizScroll)
    bool wheelHorizScroll() const;
    void setWheelHorizScroll(bool value);

public Q_SLOTS: // METHODS
    void Reset();
Q_SIGNALS: // SIGNALS
};

#endif
