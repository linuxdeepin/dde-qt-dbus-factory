/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.AppStore.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.AppStoreAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.AppStore.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.AppStoreAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class AppStoreAdaptor
 */

AppStoreAdaptor::AppStoreAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

AppStoreAdaptor::~AppStoreAdaptor()
{
    // destructor
}

void AppStoreAdaptor::AppDetails(const QString &appID)
{
    // handle method call com.deepin.AppStore.AppDetails
    QMetaObject::invokeMethod(parent(), "AppDetails", Q_ARG(QString, appID));
}

QVariantMap AppStoreAdaptor::Install(const QString &appID)
{
    // handle method call com.deepin.AppStore.Install
    QVariantMap out0;
    QMetaObject::invokeMethod(parent(), "Install", Q_RETURN_ARG(QVariantMap, out0), Q_ARG(QString, appID));
    return out0;
}

void AppStoreAdaptor::Raise()
{
    // handle method call com.deepin.AppStore.Raise
    QMetaObject::invokeMethod(parent(), "Raise");
}

void AppStoreAdaptor::ShowAppDetail(const QString &appName)
{
    // handle method call com.deepin.AppStore.ShowAppDetail
    QMetaObject::invokeMethod(parent(), "ShowAppDetail", Q_ARG(QString, appName));
}

QVariantMap AppStoreAdaptor::Uninstall(const QString &appID)
{
    // handle method call com.deepin.AppStore.Uninstall
    QVariantMap out0;
    QMetaObject::invokeMethod(parent(), "Uninstall", Q_RETURN_ARG(QVariantMap, out0), Q_ARG(QString, appID));
    return out0;
}

QVariantMap AppStoreAdaptor::Update(const QString &appID)
{
    // handle method call com.deepin.AppStore.Update
    QVariantMap out0;
    QMetaObject::invokeMethod(parent(), "Update", Q_RETURN_ARG(QVariantMap, out0), Q_ARG(QString, appID));
    return out0;
}

QVariantMap AppStoreAdaptor::UpdateAll()
{
    // handle method call com.deepin.AppStore.UpdateAll
    QVariantMap out0;
    QMetaObject::invokeMethod(parent(), "UpdateAll", Q_RETURN_ARG(QVariantMap, out0));
    return out0;
}

