/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.InputDevice.Mouse.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.MouseAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.Mouse.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.MouseAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class MouseAdaptor
 */

MouseAdaptor::MouseAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

MouseAdaptor::~MouseAdaptor()
{
    // destructor
}

bool MouseAdaptor::adaptiveAccelProfile() const
{
    // get the value of property AdaptiveAccelProfile
    return qvariant_cast< bool >(parent()->property("AdaptiveAccelProfile"));
}

void MouseAdaptor::setAdaptiveAccelProfile(bool value)
{
    // set the value of property AdaptiveAccelProfile
    parent()->setProperty("AdaptiveAccelProfile", QVariant::fromValue(value));
}

QString MouseAdaptor::deviceList() const
{
    // get the value of property DeviceList
    return qvariant_cast< QString >(parent()->property("DeviceList"));
}

bool MouseAdaptor::disableTpad() const
{
    // get the value of property DisableTpad
    return qvariant_cast< bool >(parent()->property("DisableTpad"));
}

void MouseAdaptor::setDisableTpad(bool value)
{
    // set the value of property DisableTpad
    parent()->setProperty("DisableTpad", QVariant::fromValue(value));
}

int MouseAdaptor::doubleClick() const
{
    // get the value of property DoubleClick
    return qvariant_cast< int >(parent()->property("DoubleClick"));
}

void MouseAdaptor::setDoubleClick(int value)
{
    // set the value of property DoubleClick
    parent()->setProperty("DoubleClick", QVariant::fromValue(value));
}

int MouseAdaptor::dragThreshold() const
{
    // get the value of property DragThreshold
    return qvariant_cast< int >(parent()->property("DragThreshold"));
}

void MouseAdaptor::setDragThreshold(int value)
{
    // set the value of property DragThreshold
    parent()->setProperty("DragThreshold", QVariant::fromValue(value));
}

bool MouseAdaptor::exist() const
{
    // get the value of property Exist
    return qvariant_cast< bool >(parent()->property("Exist"));
}

bool MouseAdaptor::leftHanded() const
{
    // get the value of property LeftHanded
    return qvariant_cast< bool >(parent()->property("LeftHanded"));
}

void MouseAdaptor::setLeftHanded(bool value)
{
    // set the value of property LeftHanded
    parent()->setProperty("LeftHanded", QVariant::fromValue(value));
}

bool MouseAdaptor::middleButtonEmulation() const
{
    // get the value of property MiddleButtonEmulation
    return qvariant_cast< bool >(parent()->property("MiddleButtonEmulation"));
}

void MouseAdaptor::setMiddleButtonEmulation(bool value)
{
    // set the value of property MiddleButtonEmulation
    parent()->setProperty("MiddleButtonEmulation", QVariant::fromValue(value));
}

double MouseAdaptor::motionAcceleration() const
{
    // get the value of property MotionAcceleration
    return qvariant_cast< double >(parent()->property("MotionAcceleration"));
}

void MouseAdaptor::setMotionAcceleration(double value)
{
    // set the value of property MotionAcceleration
    parent()->setProperty("MotionAcceleration", QVariant::fromValue(value));
}

double MouseAdaptor::motionScaling() const
{
    // get the value of property MotionScaling
    return qvariant_cast< double >(parent()->property("MotionScaling"));
}

void MouseAdaptor::setMotionScaling(double value)
{
    // set the value of property MotionScaling
    parent()->setProperty("MotionScaling", QVariant::fromValue(value));
}

double MouseAdaptor::motionThreshold() const
{
    // get the value of property MotionThreshold
    return qvariant_cast< double >(parent()->property("MotionThreshold"));
}

void MouseAdaptor::setMotionThreshold(double value)
{
    // set the value of property MotionThreshold
    parent()->setProperty("MotionThreshold", QVariant::fromValue(value));
}

bool MouseAdaptor::naturalScroll() const
{
    // get the value of property NaturalScroll
    return qvariant_cast< bool >(parent()->property("NaturalScroll"));
}

void MouseAdaptor::setNaturalScroll(bool value)
{
    // set the value of property NaturalScroll
    parent()->setProperty("NaturalScroll", QVariant::fromValue(value));
}

void MouseAdaptor::Reset()
{
    // handle method call com.deepin.daemon.InputDevice.Mouse.Reset
    QMetaObject::invokeMethod(parent(), "Reset");
}

