/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.Keybinding.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.KeybindingAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Keybinding.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.KeybindingAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KeybindingAdaptor
 */

KeybindingAdaptor::KeybindingAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KeybindingAdaptor::~KeybindingAdaptor()
{
    // destructor
}

int KeybindingAdaptor::numLockState() const
{
    // get the value of property NumLockState
    return qvariant_cast< int >(parent()->property("NumLockState"));
}

uint KeybindingAdaptor::shortcutSwitchLayout() const
{
    // get the value of property ShortcutSwitchLayout
    return qvariant_cast< uint >(parent()->property("ShortcutSwitchLayout"));
}

void KeybindingAdaptor::setShortcutSwitchLayout(uint value)
{
    // set the value of property ShortcutSwitchLayout
    parent()->setProperty("ShortcutSwitchLayout", QVariant::fromValue(value));
}

QString KeybindingAdaptor::Add(const QString &in0, const QString &in1, const QString &in2, bool &out1)
{
    // handle method call com.deepin.daemon.Keybinding.Add
    //return static_cast<YourObjectType *>(parent())->Add(in0, in1, in2, out1);
}

void KeybindingAdaptor::AddCustomShortcut(const QString &in0, const QString &in1, const QString &in2)
{
    // handle method call com.deepin.daemon.Keybinding.AddCustomShortcut
    QMetaObject::invokeMethod(parent(), "AddCustomShortcut", Q_ARG(QString, in0), Q_ARG(QString, in1), Q_ARG(QString, in2));
}

void KeybindingAdaptor::AddShortcutKeystroke(const QString &in0, int in1, const QString &in2)
{
    // handle method call com.deepin.daemon.Keybinding.AddShortcutKeystroke
    QMetaObject::invokeMethod(parent(), "AddShortcutKeystroke", Q_ARG(QString, in0), Q_ARG(int, in1), Q_ARG(QString, in2));
}

bool KeybindingAdaptor::CheckAvaliable(const QString &in0, QString &out1)
{
    // handle method call com.deepin.daemon.Keybinding.CheckAvaliable
    //return static_cast<YourObjectType *>(parent())->CheckAvaliable(in0, out1);
}

void KeybindingAdaptor::ClearShortcutKeystrokes(const QString &in0, int in1)
{
    // handle method call com.deepin.daemon.Keybinding.ClearShortcutKeystrokes
    QMetaObject::invokeMethod(parent(), "ClearShortcutKeystrokes", Q_ARG(QString, in0), Q_ARG(int, in1));
}

void KeybindingAdaptor::Delete(const QString &in0, int in1)
{
    // handle method call com.deepin.daemon.Keybinding.Delete
    QMetaObject::invokeMethod(parent(), "Delete", Q_ARG(QString, in0), Q_ARG(int, in1));
}

void KeybindingAdaptor::DeleteCustomShortcut(const QString &in0)
{
    // handle method call com.deepin.daemon.Keybinding.DeleteCustomShortcut
    QMetaObject::invokeMethod(parent(), "DeleteCustomShortcut", Q_ARG(QString, in0));
}

void KeybindingAdaptor::DeleteShortcutKeystroke(const QString &in0, int in1, const QString &in2)
{
    // handle method call com.deepin.daemon.Keybinding.DeleteShortcutKeystroke
    QMetaObject::invokeMethod(parent(), "DeleteShortcutKeystroke", Q_ARG(QString, in0), Q_ARG(int, in1), Q_ARG(QString, in2));
}

void KeybindingAdaptor::Disable(const QString &in0, int in1)
{
    // handle method call com.deepin.daemon.Keybinding.Disable
    QMetaObject::invokeMethod(parent(), "Disable", Q_ARG(QString, in0), Q_ARG(int, in1));
}

QString KeybindingAdaptor::GetShortcut(const QString &in0, int in1)
{
    // handle method call com.deepin.daemon.Keybinding.GetShortcut
    QString out0;
    QMetaObject::invokeMethod(parent(), "GetShortcut", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0), Q_ARG(int, in1));
    return out0;
}

void KeybindingAdaptor::GrabScreen()
{
    // handle method call com.deepin.daemon.Keybinding.GrabScreen
    QMetaObject::invokeMethod(parent(), "GrabScreen");
}

QString KeybindingAdaptor::List()
{
    // handle method call com.deepin.daemon.Keybinding.List
    QString out0;
    QMetaObject::invokeMethod(parent(), "List", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString KeybindingAdaptor::ListAllShortcuts()
{
    // handle method call com.deepin.daemon.Keybinding.ListAllShortcuts
    QString out0;
    QMetaObject::invokeMethod(parent(), "ListAllShortcuts", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString KeybindingAdaptor::ListShortcutsByType(int in0)
{
    // handle method call com.deepin.daemon.Keybinding.ListShortcutsByType
    QString out0;
    QMetaObject::invokeMethod(parent(), "ListShortcutsByType", Q_RETURN_ARG(QString, out0), Q_ARG(int, in0));
    return out0;
}

QString KeybindingAdaptor::LookupConflictingShortcut(const QString &in0)
{
    // handle method call com.deepin.daemon.Keybinding.LookupConflictingShortcut
    QString out0;
    QMetaObject::invokeMethod(parent(), "LookupConflictingShortcut", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0));
    return out0;
}

bool KeybindingAdaptor::ModifiedAccel(const QString &in0, int in1, const QString &in2, bool in3, QString &out1)
{
    // handle method call com.deepin.daemon.Keybinding.ModifiedAccel
    //return static_cast<YourObjectType *>(parent())->ModifiedAccel(in0, in1, in2, in3, out1);
}

void KeybindingAdaptor::ModifyCustomShortcut(const QString &in0, const QString &in1, const QString &in2, const QString &in3)
{
    // handle method call com.deepin.daemon.Keybinding.ModifyCustomShortcut
    QMetaObject::invokeMethod(parent(), "ModifyCustomShortcut", Q_ARG(QString, in0), Q_ARG(QString, in1), Q_ARG(QString, in2), Q_ARG(QString, in3));
}

QString KeybindingAdaptor::Query(const QString &in0, int in1)
{
    // handle method call com.deepin.daemon.Keybinding.Query
    QString out0;
    QMetaObject::invokeMethod(parent(), "Query", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0), Q_ARG(int, in1));
    return out0;
}

void KeybindingAdaptor::Reset()
{
    // handle method call com.deepin.daemon.Keybinding.Reset
    QMetaObject::invokeMethod(parent(), "Reset");
}

QString KeybindingAdaptor::SearchShortcuts(const QString &in0)
{
    // handle method call com.deepin.daemon.Keybinding.SearchShortcuts
    QString out0;
    QMetaObject::invokeMethod(parent(), "SearchShortcuts", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0));
    return out0;
}

void KeybindingAdaptor::SelectKeystroke()
{
    // handle method call com.deepin.daemon.Keybinding.SelectKeystroke
    QMetaObject::invokeMethod(parent(), "SelectKeystroke");
}

void KeybindingAdaptor::SetNumLockState(int in0)
{
    // handle method call com.deepin.daemon.Keybinding.SetNumLockState
    QMetaObject::invokeMethod(parent(), "SetNumLockState", Q_ARG(int, in0));
}

