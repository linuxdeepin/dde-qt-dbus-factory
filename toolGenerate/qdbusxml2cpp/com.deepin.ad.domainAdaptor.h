/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.ad.domain.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.ad.domainAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.ad.domain.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_AD_DOMAINADAPTOR_H
#define COM_DEEPIN_AD_DOMAINADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.ad.domain.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.AD.ControlCenter
 */
class ControlCenterAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.AD.ControlCenter")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.AD.ControlCenter\">\n"
"    <property access=\"readwrite\" type=\"b\" name=\"isDomainEnabled\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"isJoined\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"isServerValid\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"isProcessing\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"isDemandReboot\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"errorDetail\"/>\n"
"    <signal name=\"enableDomainEnded\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"bSuccess\"/>\n"
"    </signal>\n"
"    <signal name=\"disableDomainEnded\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"bSuccess\"/>\n"
"    </signal>\n"
"    <signal name=\"joinDomainEnded\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"bSuccess\"/>\n"
"    </signal>\n"
"    <signal name=\"exitDomainEnded\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"bSuccess\"/>\n"
"    </signal>\n"
"    <signal name=\"checkServerEnded\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"bSuccess\"/>\n"
"    </signal>\n"
"    <signal name=\"queryAreasEnded\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"strJson\"/>\n"
"    </signal>\n"
"    <signal name=\"checkUserEnded\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"bSuccess\"/>\n"
"    </signal>\n"
"    <signal name=\"queryIdentityEnded\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"strJson\"/>\n"
"    </signal>\n"
"    <signal name=\"modifyPasswordEnded\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"bSuccess\"/>\n"
"    </signal>\n"
"    <signal name=\"serverError\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"errorDescription\"/>\n"
"    </signal>\n"
"    <signal name=\"demandReboot\"/>\n"
"    <method name=\"enableDomain\"/>\n"
"    <method name=\"disableDomain\"/>\n"
"    <method name=\"joinDomain\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"strHostName\"/>\n"
"    </method>\n"
"    <method name=\"exitDomain\"/>\n"
"    <method name=\"checkIpv4\">\n"
"      <arg direction=\"out\" type=\"b\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"strIp\"/>\n"
"    </method>\n"
"    <method name=\"checkServer\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"strIp\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"iPort\"/>\n"
"    </method>\n"
"    <method name=\"queryAreas\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"strSearchKey\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"iPageIndex\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"iPageSize\"/>\n"
"    </method>\n"
"    <method name=\"checkUser\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"iAreaId\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"strAreaName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"strUserName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"strPassword\"/>\n"
"    </method>\n"
"    <method name=\"reboot\"/>\n"
"    <method name=\"queryIdentity\"/>\n"
"    <method name=\"modifyPassword\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"strOldPassword\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"strNewPassword\"/>\n"
"    </method>\n"
"    <method name=\"enableHttps\"/>\n"
"    <method name=\"passwordDemandTip\">\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"forceExitDomain\"/>\n"
"  </interface>\n"
        "")
public:
    ControlCenterAdaptor(QObject *parent);
    virtual ~ControlCenterAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QString errorDetail READ errorDetail)
    QString errorDetail() const;

    Q_PROPERTY(bool isDemandReboot READ isDemandReboot)
    bool isDemandReboot() const;

    Q_PROPERTY(bool isDomainEnabled READ isDomainEnabled WRITE setIsDomainEnabled)
    bool isDomainEnabled() const;
    void setIsDomainEnabled(bool value);

    Q_PROPERTY(bool isJoined READ isJoined)
    bool isJoined() const;

    Q_PROPERTY(bool isProcessing READ isProcessing)
    bool isProcessing() const;

    Q_PROPERTY(bool isServerValid READ isServerValid)
    bool isServerValid() const;

public Q_SLOTS: // METHODS
    bool checkIpv4(const QString &strIp);
    void checkServer(const QString &strIp, int iPort);
    void checkUser(int iAreaId, const QString &strAreaName, const QString &strUserName, const QString &strPassword);
    void disableDomain();
    void enableDomain();
    void enableHttps();
    void exitDomain();
    void forceExitDomain();
    void joinDomain(const QString &strHostName);
    void modifyPassword(const QString &strOldPassword, const QString &strNewPassword);
    QString passwordDemandTip();
    void queryAreas(const QString &strSearchKey, int iPageIndex, int iPageSize);
    void queryIdentity();
    void reboot();
Q_SIGNALS: // SIGNALS
    void checkServerEnded(bool bSuccess);
    void checkUserEnded(bool bSuccess);
    void demandReboot();
    void disableDomainEnded(bool bSuccess);
    void enableDomainEnded(bool bSuccess);
    void exitDomainEnded(bool bSuccess);
    void joinDomainEnded(bool bSuccess);
    void modifyPasswordEnded(bool bSuccess);
    void queryAreasEnded(const QString &strJson);
    void queryIdentityEnded(const QString &strJson);
    void serverError(const QString &errorDescription);
};

#endif
