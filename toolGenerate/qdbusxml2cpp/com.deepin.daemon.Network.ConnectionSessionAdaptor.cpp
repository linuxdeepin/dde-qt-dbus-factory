/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.Network.ConnectionSession.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Network.ConnectionSessionAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Network.ConnectionSession.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Network.ConnectionSessionAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ConnectionSessionAdaptor
 */

ConnectionSessionAdaptor::ConnectionSessionAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ConnectionSessionAdaptor::~ConnectionSessionAdaptor()
{
    // destructor
}

bool ConnectionSessionAdaptor::allowDelete() const
{
    // get the value of property AllowDelete
    return qvariant_cast< bool >(parent()->property("AllowDelete"));
}

bool ConnectionSessionAdaptor::allowEditConnectionId() const
{
    // get the value of property AllowEditConnectionId
    return qvariant_cast< bool >(parent()->property("AllowEditConnectionId"));
}

NetworkAvailableKeys ConnectionSessionAdaptor::availableKeys() const
{
    // get the value of property AvailableKeys
    return qvariant_cast< NetworkAvailableKeys >(parent()->property("AvailableKeys"));
}

QStringList ConnectionSessionAdaptor::availableSections() const
{
    // get the value of property AvailableSections
    return qvariant_cast< QStringList >(parent()->property("AvailableSections"));
}

QStringList ConnectionSessionAdaptor::availableVirtualSections() const
{
    // get the value of property AvailableVirtualSections
    return qvariant_cast< QStringList >(parent()->property("AvailableVirtualSections"));
}

QDBusObjectPath ConnectionSessionAdaptor::connectionPath() const
{
    // get the value of property ConnectionPath
    return qvariant_cast< QDBusObjectPath >(parent()->property("ConnectionPath"));
}

NetworkErrors ConnectionSessionAdaptor::errors() const
{
    // get the value of property Errors
    return qvariant_cast< NetworkErrors >(parent()->property("Errors"));
}

QString ConnectionSessionAdaptor::type() const
{
    // get the value of property Type
    return qvariant_cast< QString >(parent()->property("Type"));
}

QString ConnectionSessionAdaptor::uuid() const
{
    // get the value of property Uuid
    return qvariant_cast< QString >(parent()->property("Uuid"));
}

void ConnectionSessionAdaptor::Close()
{
    // handle method call com.deepin.daemon.ConnectionSession.Close
    QMetaObject::invokeMethod(parent(), "Close");
}

NetworkConnectionData ConnectionSessionAdaptor::DebugGetConnectionData()
{
    // handle method call com.deepin.daemon.ConnectionSession.DebugGetConnectionData
    NetworkConnectionData out0;
    QMetaObject::invokeMethod(parent(), "DebugGetConnectionData", Q_RETURN_ARG(NetworkConnectionData, out0));
    return out0;
}

NetworkErrors ConnectionSessionAdaptor::DebugGetErrors()
{
    // handle method call com.deepin.daemon.ConnectionSession.DebugGetErrors
    NetworkErrors out0;
    QMetaObject::invokeMethod(parent(), "DebugGetErrors", Q_RETURN_ARG(NetworkErrors, out0));
    return out0;
}

QString ConnectionSessionAdaptor::DebugListKeyDetail()
{
    // handle method call com.deepin.daemon.ConnectionSession.DebugListKeyDetail
    QString out0;
    QMetaObject::invokeMethod(parent(), "DebugListKeyDetail", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString ConnectionSessionAdaptor::GetAllKeys()
{
    // handle method call com.deepin.daemon.ConnectionSession.GetAllKeys
    QString out0;
    QMetaObject::invokeMethod(parent(), "GetAllKeys", Q_RETURN_ARG(QString, out0));
    return out0;
}

QString ConnectionSessionAdaptor::GetAvailableValues(const QString &in0, const QString &in1)
{
    // handle method call com.deepin.daemon.ConnectionSession.GetAvailableValues
    QString out0;
    QMetaObject::invokeMethod(parent(), "GetAvailableValues", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

QString ConnectionSessionAdaptor::GetKey(const QString &in0, const QString &in1)
{
    // handle method call com.deepin.daemon.ConnectionSession.GetKey
    QString out0;
    QMetaObject::invokeMethod(parent(), "GetKey", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

QString ConnectionSessionAdaptor::GetKeyName(const QString &in0, const QString &in1)
{
    // handle method call com.deepin.daemon.ConnectionSession.GetKeyName
    QString out0;
    QMetaObject::invokeMethod(parent(), "GetKeyName", Q_RETURN_ARG(QString, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

bool ConnectionSessionAdaptor::IsDefaultExpandedSection(const QString &in0)
{
    // handle method call com.deepin.daemon.ConnectionSession.IsDefaultExpandedSection
    bool out0;
    QMetaObject::invokeMethod(parent(), "IsDefaultExpandedSection", Q_RETURN_ARG(bool, out0), Q_ARG(QString, in0));
    return out0;
}

QString ConnectionSessionAdaptor::ListAvailableKeyDetail()
{
    // handle method call com.deepin.daemon.ConnectionSession.ListAvailableKeyDetail
    QString out0;
    QMetaObject::invokeMethod(parent(), "ListAvailableKeyDetail", Q_RETURN_ARG(QString, out0));
    return out0;
}

bool ConnectionSessionAdaptor::Save(bool in0)
{
    // handle method call com.deepin.daemon.ConnectionSession.Save
    bool out0;
    QMetaObject::invokeMethod(parent(), "Save", Q_RETURN_ARG(bool, out0), Q_ARG(bool, in0));
    return out0;
}

void ConnectionSessionAdaptor::SetKey(const QString &in0, const QString &in1, const QString &in2)
{
    // handle method call com.deepin.daemon.ConnectionSession.SetKey
    QMetaObject::invokeMethod(parent(), "SetKey", Q_ARG(QString, in0), Q_ARG(QString, in1), Q_ARG(QString, in2));
}

QDBusUnixFileDescriptor ConnectionSessionAdaptor::SetKeyFd(const QString &in0, const QString &in1)
{
    // handle method call com.deepin.daemon.ConnectionSession.SetKeyFd
    QDBusUnixFileDescriptor out0;
    QMetaObject::invokeMethod(parent(), "SetKeyFd", Q_RETURN_ARG(QDBusUnixFileDescriptor, out0), Q_ARG(QString, in0), Q_ARG(QString, in1));
    return out0;
}

