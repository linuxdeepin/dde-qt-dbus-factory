/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.dde.daemon.Launcherd.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.LauncherdAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.Launcherd.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.LauncherdAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class LauncherAdaptor
 */

LauncherAdaptor::LauncherAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

LauncherAdaptor::~LauncherAdaptor()
{
    // destructor
}

int LauncherAdaptor::displayMode() const
{
    // get the value of property DisplayMode
    return qvariant_cast< int >(parent()->property("DisplayMode"));
}

void LauncherAdaptor::setDisplayMode(int value)
{
    // set the value of property DisplayMode
    parent()->setProperty("DisplayMode", QVariant::fromValue(value));
}

bool LauncherAdaptor::fullscreen() const
{
    // get the value of property Fullscreen
    return qvariant_cast< bool >(parent()->property("Fullscreen"));
}

void LauncherAdaptor::setFullscreen(bool value)
{
    // set the value of property Fullscreen
    parent()->setProperty("Fullscreen", QVariant::fromValue(value));
}

LauncherItemInfoList LauncherAdaptor::GetAllItemInfos()
{
    // handle method call com.deepin.dde.daemon.Launcher.GetAllItemInfos
    LauncherItemInfoList itemInfoList;
    QMetaObject::invokeMethod(parent(), "GetAllItemInfos", Q_RETURN_ARG(LauncherItemInfoList, itemInfoList));
    return itemInfoList;
}

QStringList LauncherAdaptor::GetAllNewInstalledApps()
{
    // handle method call com.deepin.dde.daemon.Launcher.GetAllNewInstalledApps
    QStringList apps;
    QMetaObject::invokeMethod(parent(), "GetAllNewInstalledApps", Q_RETURN_ARG(QStringList, apps));
    return apps;
}

bool LauncherAdaptor::GetDisableScaling(const QString &id)
{
    // handle method call com.deepin.dde.daemon.Launcher.GetDisableScaling
    bool value;
    QMetaObject::invokeMethod(parent(), "GetDisableScaling", Q_RETURN_ARG(bool, value), Q_ARG(QString, id));
    return value;
}

LauncherItemInfo LauncherAdaptor::GetItemInfo(const QString &id)
{
    // handle method call com.deepin.dde.daemon.Launcher.GetItemInfo
    LauncherItemInfo itemInfo;
    QMetaObject::invokeMethod(parent(), "GetItemInfo", Q_RETURN_ARG(LauncherItemInfo, itemInfo), Q_ARG(QString, id));
    return itemInfo;
}

bool LauncherAdaptor::GetUseProxy(const QString &id)
{
    // handle method call com.deepin.dde.daemon.Launcher.GetUseProxy
    bool value;
    QMetaObject::invokeMethod(parent(), "GetUseProxy", Q_RETURN_ARG(bool, value), Q_ARG(QString, id));
    return value;
}

bool LauncherAdaptor::IsItemOnDesktop(const QString &id)
{
    // handle method call com.deepin.dde.daemon.Launcher.IsItemOnDesktop
    bool result;
    QMetaObject::invokeMethod(parent(), "IsItemOnDesktop", Q_RETURN_ARG(bool, result), Q_ARG(QString, id));
    return result;
}

void LauncherAdaptor::MarkLaunched(const QString &id)
{
    // handle method call com.deepin.dde.daemon.Launcher.MarkLaunched
    QMetaObject::invokeMethod(parent(), "MarkLaunched", Q_ARG(QString, id));
}

bool LauncherAdaptor::RequestRemoveFromDesktop(const QString &id)
{
    // handle method call com.deepin.dde.daemon.Launcher.RequestRemoveFromDesktop
    bool ok;
    QMetaObject::invokeMethod(parent(), "RequestRemoveFromDesktop", Q_RETURN_ARG(bool, ok), Q_ARG(QString, id));
    return ok;
}

bool LauncherAdaptor::RequestSendToDesktop(const QString &id)
{
    // handle method call com.deepin.dde.daemon.Launcher.RequestSendToDesktop
    bool ok;
    QMetaObject::invokeMethod(parent(), "RequestSendToDesktop", Q_RETURN_ARG(bool, ok), Q_ARG(QString, id));
    return ok;
}

void LauncherAdaptor::RequestUninstall(const QString &id, bool purge)
{
    // handle method call com.deepin.dde.daemon.Launcher.RequestUninstall
    QMetaObject::invokeMethod(parent(), "RequestUninstall", Q_ARG(QString, id), Q_ARG(bool, purge));
}

void LauncherAdaptor::Search(const QString &key)
{
    // handle method call com.deepin.dde.daemon.Launcher.Search
    QMetaObject::invokeMethod(parent(), "Search", Q_ARG(QString, key));
}

void LauncherAdaptor::SetDisableScaling(const QString &id, bool value)
{
    // handle method call com.deepin.dde.daemon.Launcher.SetDisableScaling
    QMetaObject::invokeMethod(parent(), "SetDisableScaling", Q_ARG(QString, id), Q_ARG(bool, value));
}

void LauncherAdaptor::SetUseProxy(const QString &id, bool value)
{
    // handle method call com.deepin.dde.daemon.Launcher.SetUseProxy
    QMetaObject::invokeMethod(parent(), "SetUseProxy", Q_ARG(QString, id), Q_ARG(bool, value));
}

