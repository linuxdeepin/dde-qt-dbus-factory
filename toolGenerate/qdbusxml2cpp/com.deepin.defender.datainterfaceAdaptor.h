/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.defender.datainterface.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.datainterfaceAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.datainterface.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DEFENDER_DATAINTERFACEADAPTOR_H
#define COM_DEEPIN_DEFENDER_DATAINTERFACEADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.datainterface.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.defender.datainterface
 */
class DatainterfaceAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.defender.datainterface")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.defender.datainterface\">\n"
"    <property access=\"read\" type=\"as\" name=\"ScanningUsbPaths\">\n"
"      <annotation value=\"QStringList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </property>\n"
"    <method name=\"StartApp\"/>\n"
"    <method name=\"ExitApp\"/>\n"
"    <method name=\"preInitialize\"/>\n"
"    <signal name=\"NotifyHeartbeat\"/>\n"
"    <method name=\"notifyAppendThreatDataByPath\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sfilePath\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"flag\"/>\n"
"    </method>\n"
"    <method name=\"notifyDeleteThreatDataByPath\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sfilePath\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"flag\"/>\n"
"    </method>\n"
"    <method name=\"notifySelectThreatDataByPath\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sfilePath\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"flag\"/>\n"
"    </method>\n"
"    <method name=\"notifySelectThreatCount\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"spath\"/>\n"
"    </method>\n"
"    <method name=\"getSelectThreatsCount\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"count\"/>\n"
"    </method>\n"
"    <method name=\"showEnginChangeNotity\"/>\n"
"    <method name=\"setFireWallSwitchStatus\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"isbFireWall\"/>\n"
"    </method>\n"
"    <method name=\"getFireWallSwitchStatus\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"value\"/>\n"
"    </method>\n"
"    <method name=\"setNetControlSwitchStatus\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"isbFireWall\"/>\n"
"    </method>\n"
"    <method name=\"setRemControlSwitchStatus\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"isbFireWall\"/>\n"
"    </method>\n"
"    <signal name=\"requestNetAppsChange\">\n"
"      <arg direction=\"out\" type=\"(a(isbssssssllddddsss))\"/>\n"
"      <annotation value=\"DefenderProcInfoList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <method name=\"getNetAppsInfo\"/>\n"
"    <method name=\"setNetAppStatusChange\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sDkgName\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"nStatus\"/>\n"
"    </method>\n"
"    <method name=\"setNetRequestReply\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPkgName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sId\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"nType\"/>\n"
"    </method>\n"
"    <method name=\"setNetControlDefaultStatus\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"nDefault\"/>\n"
"    </method>\n"
"    <method name=\"getNetControlDefaultStatus\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"value\"/>\n"
"    </method>\n"
"    <signal name=\"requestRemAppsChange\">\n"
"      <arg direction=\"out\" type=\"(a(isbssssssllddddsss))\"/>\n"
"      <annotation value=\"DefenderProcInfoList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <method name=\"getRemAppsInfo\"/>\n"
"    <method name=\"setRemAppStatusChange\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sDkgName\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"nStatus\"/>\n"
"    </method>\n"
"    <method name=\"setRemRequestReply\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPkgName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sId\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"nType\"/>\n"
"    </method>\n"
"    <method name=\"setRemControlDefaultStatus\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"nDefault\"/>\n"
"    </method>\n"
"    <method name=\"getRemControlDefaultStatus\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"value\"/>\n"
"    </method>\n"
"    <signal name=\"requestRemDefaultAllowStatus\"/>\n"
"    <method name=\"showNetControlDialog\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sDkgName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sAppName\"/>\n"
"    </method>\n"
"    <method name=\"showNetControlAskDialog\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sDkgName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sAppName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sId\"/>\n"
"    </method>\n"
"    <method name=\"showRemControlDialog\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sDkgName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sAppName\"/>\n"
"    </method>\n"
"    <method name=\"showRemControlAskDialog\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sDkgName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sAppName\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sId\"/>\n"
"    </method>\n"
"    <method name=\"setRemRegisterStatus\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"bStatus\"/>\n"
"    </method>\n"
"    <method name=\"getRemRegisterStatus\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"bStatus\"/>\n"
"    </method>\n"
"    <method name=\"JumpToAppStore\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"nType\"/>\n"
"    </method>\n"
"    <method name=\"startLauncherManage\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"value\"/>\n"
"    </method>\n"
"    <method name=\"getAppsInfoEnable\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"value\"/>\n"
"    </method>\n"
"    <method name=\"getAppsInfoDisable\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"value\"/>\n"
"    </method>\n"
"    <method name=\"isAutostart\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPath\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"value\"/>\n"
"    </method>\n"
"    <method name=\"exeAutostart\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"nStatus\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"sPath\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"value\"/>\n"
"    </method>\n"
"    <signal name=\"AccessRefreshData\">\n"
"      <arg type=\"b\" name=\"bAdd\"/>\n"
"      <arg type=\"s\" name=\"sID\"/>\n"
"    </signal>\n"
"    <method name=\"notifyGetYesterdayFlowData\"/>\n"
"    <method name=\"notifyGetTodayFlowData\"/>\n"
"    <method name=\"notifyGetLastMonthFlowData\"/>\n"
"    <method name=\"notifyGetThisMonthFlowData\"/>\n"
"    <method name=\"NotifyDontGetFlowData\"/>\n"
"    <method name=\"notifyGetAppYesterdayFlowData\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"appname\"/>\n"
"    </method>\n"
"    <method name=\"notifyGetAppTodayFlowData\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"appname\"/>\n"
"    </method>\n"
"    <method name=\"notifyGetAppLastMonthFlowData\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"appname\"/>\n"
"    </method>\n"
"    <method name=\"notifyGetAppThisMonthFlowData\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"appname\"/>\n"
"    </method>\n"
"    <method name=\"GetAllProcInfos\">\n"
"      <arg direction=\"out\" type=\"a(isbssssssllsddddsss)\" name=\"procInfos\"/>\n"
"      <annotation value=\"DefenderProcInfoList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <signal name=\"sendProcInfos\">\n"
"      <arg direction=\"out\" type=\"(a(isbssssssllsddddsss))\"/>\n"
"      <annotation value=\"DefenderProcInfoList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <signal name=\"SendAllAppFlowList\">\n"
"      <arg direction=\"out\" type=\"(a(isbssssssllsddddsss))\"/>\n"
"      <annotation value=\"DefenderProcInfoList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"      <arg type=\"s\" name=\"sTimeRange\"/>\n"
"    </signal>\n"
"    <signal name=\"SendAppFlowList\">\n"
"      <arg direction=\"out\" type=\"(a(isbssssssllsddddsss))\"/>\n"
"      <annotation value=\"DefenderProcInfoList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <method name=\"getProcessEnvironmentVariable\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"pid\"/>\n"
"      <arg direction=\"in\" type=\"s\" name=\"environmentname\"/>\n"
"      <arg direction=\"out\" type=\"s\"/>\n"
"    </method>\n"
"    <property access=\"read\" type=\"(iss)\" name=\"processInfo\">\n"
"      <annotation value=\"DefenderProcessInfo\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <signal name=\"processInfo\">\n"
"      <arg direction=\"out\" type=\"(iss)\"/>\n"
"      <annotation value=\"DefenderProcessInfo\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <signal name=\"processInfoList\">\n"
"      <arg direction=\"out\" type=\"(a(iss))\"/>\n"
"      <annotation value=\"DefenderProcessInfoList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <property access=\"read\" type=\"a(i)\" name=\"allProcPidList\">\n"
"      <annotation value=\"DefenderProcessList\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <signal name=\"allProcPidList\">\n"
"      <arg direction=\"out\" type=\"a{i}\"/>\n"
"      <annotation value=\"DefenderProcessList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <signal name=\"guiProcDesktopList\">\n"
"      <arg direction=\"out\" type=\"(as)\"/>\n"
"      <annotation value=\"QStringList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <signal name=\"singleProcDesktopList\">\n"
"      <arg direction=\"out\" type=\"(as)\"/>\n"
"      <annotation value=\"QStringList\" name=\"org.qtproject.QtDBus.QtTypeName.In0\"/>\n"
"    </signal>\n"
"    <signal name=\"notifyUpdateLauncherList\"/>\n"
"    <method name=\"IsolateUsbVirus\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"usbMountPath\"/>\n"
"    </method>\n"
"    <signal name=\"NotifyIsolateUsbVirus\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"usbMountPath\"/>\n"
"    </signal>\n"
"    <method name=\"RequestStopUsbScannig\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"path\"/>\n"
"    </method>\n"
"    <signal name=\"UsbScanningStopped\">\n"
"      <arg type=\"s\" name=\"path\"/>\n"
"    </signal>\n"
"    <signal name=\"ScanningUsbPathsChanged\">\n"
"      <arg type=\"as\" name=\"paths\"/>\n"
"      <annotation value=\"QStringList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </signal>\n"
"    <method name=\"GetCurrentEngine\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"engineType\"/>\n"
"    </method>\n"
"    <method name=\"GetTrashInfoList\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"cleanerPath\"/>\n"
"      <annotation value=\"QStringList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"GetHistoryInfoList\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"cleanerPath\"/>\n"
"      <annotation value=\"QStringList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"GetCacheInfoList\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"cleanerPath\"/>\n"
"      <annotation value=\"QStringList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"GetLogInfoList\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"cleanerPath\"/>\n"
"      <annotation value=\"QStringList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"GetAppTrashInfoList\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"cleanerPath\"/>\n"
"      <annotation value=\"QString\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"GetBrowserCookiesInfoList\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"cleanerPath\"/>\n"
"      <annotation value=\"QString\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"    </method>\n"
"    <method name=\"RequestStartTrashScan\"/>\n"
"    <method name=\"DeleteSpecifiedFiles\">\n"
"      <arg direction=\"in\" type=\"as\" name=\"path\"/>\n"
"    </method>\n"
"    <signal name=\"TrashScanFinished\">\n"
"      <arg type=\"d\" name=\"sum\"/>\n"
"    </signal>\n"
"    <method name=\"RequestCleanSelectTrash\"/>\n"
"    <signal name=\"CleanSelectTrashFinished\"/>\n"
"    <method name=\"GetPwdLimitPolicyEnable\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"enable\"/>\n"
"    </method>\n"
"    <method name=\"SetPwdLimitPolicyEnable\">\n"
"      <arg direction=\"in\" type=\"b\" name=\"enable\"/>\n"
"    </method>\n"
"    <signal name=\"SetPwdLimitPolicyEnableFinished\">\n"
"      <arg direction=\"out\" type=\"b\" name=\"enable\"/>\n"
"    </signal>\n"
"    <method name=\"SetPwdLimitedLevel\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"level\"/>\n"
"    </method>\n"
"    <signal name=\"SetPwdLimitedLevelFinished\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"level\"/>\n"
"    </signal>\n"
"    <method name=\"GetPwdChangeError\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"info\"/>\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    DatainterfaceAdaptor(QObject *parent);
    virtual ~DatainterfaceAdaptor();

public: // PROPERTIES
    Q_PROPERTY(QStringList ScanningUsbPaths READ scanningUsbPaths)
    QStringList scanningUsbPaths() const;

    Q_PROPERTY(DefenderProcessList allProcPidList READ allProcPidList)
    DefenderProcessList allProcPidList() const;

    Q_PROPERTY(DefenderProcessInfo processInfo READ processInfo)
    DefenderProcessInfo processInfo() const;

public Q_SLOTS: // METHODS
    void DeleteSpecifiedFiles(const QStringList &path);
    void ExitApp();
    DefenderProcInfoList GetAllProcInfos();
    QString GetAppTrashInfoList();
    QString GetBrowserCookiesInfoList();
    QStringList GetCacheInfoList();
    int GetCurrentEngine();
    QStringList GetHistoryInfoList();
    QStringList GetLogInfoList();
    QString GetPwdChangeError();
    bool GetPwdLimitPolicyEnable();
    QStringList GetTrashInfoList();
    void IsolateUsbVirus(const QString &usbMountPath);
    void JumpToAppStore(int nType);
    void NotifyDontGetFlowData();
    void RequestCleanSelectTrash();
    void RequestStartTrashScan();
    void RequestStopUsbScannig(const QString &path);
    void SetPwdLimitPolicyEnable(bool enable);
    void SetPwdLimitedLevel(int level);
    void StartApp();
    bool exeAutostart(int nStatus, const QString &sPath);
    QString getAppsInfoDisable();
    QString getAppsInfoEnable();
    bool getFireWallSwitchStatus();
    void getNetAppsInfo();
    int getNetControlDefaultStatus();
    QString getProcessEnvironmentVariable(int pid, const QString &environmentname);
    void getRemAppsInfo();
    int getRemControlDefaultStatus();
    bool getRemRegisterStatus();
    int getSelectThreatsCount();
    bool isAutostart(const QString &sPath);
    bool notifyAppendThreatDataByPath(const QString &sfilePath);
    bool notifyDeleteThreatDataByPath(const QString &sfilePath);
    void notifyGetAppLastMonthFlowData(const QString &appname);
    void notifyGetAppThisMonthFlowData(const QString &appname);
    void notifyGetAppTodayFlowData(const QString &appname);
    void notifyGetAppYesterdayFlowData(const QString &appname);
    void notifyGetLastMonthFlowData();
    void notifyGetThisMonthFlowData();
    void notifyGetTodayFlowData();
    void notifyGetYesterdayFlowData();
    QString notifySelectThreatCount();
    bool notifySelectThreatDataByPath(const QString &sfilePath);
    void preInitialize();
    void setFireWallSwitchStatus(bool isbFireWall);
    void setNetAppStatusChange(const QString &sDkgName, int nStatus);
    void setNetControlDefaultStatus(int nDefault);
    void setNetControlSwitchStatus(bool isbFireWall);
    void setNetRequestReply(const QString &sPkgName, const QString &sId, int nType);
    void setRemAppStatusChange(const QString &sDkgName, int nStatus);
    void setRemControlDefaultStatus(int nDefault);
    void setRemControlSwitchStatus(bool isbFireWall);
    void setRemRegisterStatus(bool bStatus);
    void setRemRequestReply(const QString &sPkgName, const QString &sId, int nType);
    void showEnginChangeNotity();
    void showNetControlAskDialog(const QString &sDkgName, const QString &sAppName, const QString &sId);
    void showNetControlDialog(const QString &sDkgName, const QString &sAppName);
    void showRemControlAskDialog(const QString &sDkgName, const QString &sAppName, const QString &sId);
    void showRemControlDialog(const QString &sDkgName, const QString &sAppName);
    bool startLauncherManage();
Q_SIGNALS: // SIGNALS
    void AccessRefreshData(bool bAdd, const QString &sID);
    void CleanSelectTrashFinished();
    void NotifyHeartbeat();
    void NotifyIsolateUsbVirus(const QString &usbMountPath);
    void ScanningUsbPathsChanged(const QStringList &paths);
    void SendAllAppFlowList(DefenderProcInfoList in0, const QString &sTimeRange);
    void SendAppFlowList(DefenderProcInfoList in0);
    void SetPwdLimitPolicyEnableFinished(bool enable);
    void SetPwdLimitedLevelFinished(int level);
    void TrashScanFinished(double sum);
    void UsbScanningStopped(const QString &path);
    void allProcPidList(DefenderProcessList in0);
    void guiProcDesktopList(const QStringList &in0);
    void notifyUpdateLauncherList();
    void processInfo(DefenderProcessInfo in0);
    void processInfoList(DefenderProcessInfoList in0);
    void requestNetAppsChange(DefenderProcInfoList in0);
    void requestRemAppsChange(DefenderProcInfoList in0);
    void requestRemDefaultAllowStatus();
    void sendProcInfos(DefenderProcInfoList in0);
    void singleProcDesktopList(const QStringList &in0);
};

#endif
