/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.defender.MonitorNetFlow.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.MonitorNetFlowAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.MonitorNetFlow.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.MonitorNetFlowAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class MonitorNetFlowAdaptor
 */

MonitorNetFlowAdaptor::MonitorNetFlowAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

MonitorNetFlowAdaptor::~MonitorNetFlowAdaptor()
{
    // destructor
}

void MonitorNetFlowAdaptor::AddSecurityLog(int nType, const QString &sInfo)
{
    // handle method call com.deepin.defender.MonitorNetFlow.AddSecurityLog
    QMetaObject::invokeMethod(parent(), "AddSecurityLog", Q_ARG(int, nType), Q_ARG(QString, sInfo));
}

void MonitorNetFlowAdaptor::ChangeIsbSaveRecord(bool change)
{
    // handle method call com.deepin.defender.MonitorNetFlow.ChangeIsbSaveRecord
    QMetaObject::invokeMethod(parent(), "ChangeIsbSaveRecord", Q_ARG(bool, change));
}

void MonitorNetFlowAdaptor::CleanJournal()
{
    // handle method call com.deepin.defender.MonitorNetFlow.CleanJournal
    QMetaObject::invokeMethod(parent(), "CleanJournal");
}

void MonitorNetFlowAdaptor::CleanSelectFile(const QStringList &pathList)
{
    // handle method call com.deepin.defender.MonitorNetFlow.CleanSelectFile
    QMetaObject::invokeMethod(parent(), "CleanSelectFile", Q_ARG(QStringList, pathList));
}

void MonitorNetFlowAdaptor::ClearUsbConnectionLog()
{
    // handle method call com.deepin.defender.MonitorNetFlow.ClearUsbConnectionLog
    QMetaObject::invokeMethod(parent(), "ClearUsbConnectionLog");
}

bool MonitorNetFlowAdaptor::DeleteSecurityLog(int nLastDate, int nType)
{
    // handle method call com.deepin.defender.MonitorNetFlow.DeleteSecurityLog
    bool isbDelete;
    QMetaObject::invokeMethod(parent(), "DeleteSecurityLog", Q_RETURN_ARG(bool, isbDelete), Q_ARG(int, nLastDate), Q_ARG(int, nType));
    return isbDelete;
}

void MonitorNetFlowAdaptor::EnableNetFlowMonitor(bool enable)
{
    // handle method call com.deepin.defender.MonitorNetFlow.EnableNetFlowMonitor
    QMetaObject::invokeMethod(parent(), "EnableNetFlowMonitor", Q_ARG(bool, enable));
}

void MonitorNetFlowAdaptor::ExitApp()
{
    // handle method call com.deepin.defender.MonitorNetFlow.ExitApp
    QMetaObject::invokeMethod(parent(), "ExitApp");
}

QStringList MonitorNetFlowAdaptor::GetDiskDevicePathList()
{
    // handle method call com.deepin.defender.MonitorNetFlow.GetDiskDevicePathList
    QStringList pathList;
    QMetaObject::invokeMethod(parent(), "GetDiskDevicePathList", Q_RETURN_ARG(QStringList, pathList));
    return pathList;
}

QString MonitorNetFlowAdaptor::GetLimitModel()
{
    // handle method call com.deepin.defender.MonitorNetFlow.GetLimitModel
    QString sModel;
    QMetaObject::invokeMethod(parent(), "GetLimitModel", Q_RETURN_ARG(QString, sModel));
    return sModel;
}

DefenderProcInfoList MonitorNetFlowAdaptor::GetPocNetFlowInfos()
{
    // handle method call com.deepin.defender.MonitorNetFlow.GetPocNetFlowInfos
    DefenderProcInfoList procInfos;
    QMetaObject::invokeMethod(parent(), "GetPocNetFlowInfos", Q_RETURN_ARG(DefenderProcInfoList, procInfos));
    return procInfos;
}

bool MonitorNetFlowAdaptor::GetRecordSaveSwitch()
{
    // handle method call com.deepin.defender.MonitorNetFlow.GetRecordSaveSwitch
    bool isbSave;
    QMetaObject::invokeMethod(parent(), "GetRecordSaveSwitch", Q_RETURN_ARG(bool, isbSave));
    return isbSave;
}

QString MonitorNetFlowAdaptor::GetUsbConnectionRecords()
{
    // handle method call com.deepin.defender.MonitorNetFlow.GetUsbConnectionRecords
    QString sRecords;
    QMetaObject::invokeMethod(parent(), "GetUsbConnectionRecords", Q_RETURN_ARG(QString, sRecords));
    return sRecords;
}

QString MonitorNetFlowAdaptor::GetWhiteList()
{
    // handle method call com.deepin.defender.MonitorNetFlow.GetWhiteList
    QString list;
    QMetaObject::invokeMethod(parent(), "GetWhiteList", Q_RETURN_ARG(QString, list));
    return list;
}

QString MonitorNetFlowAdaptor::MergeDevSavingInfoToStr(const QString &sName, const QString &sStatus, const QString &sSerial, const QString &sVendorID, const QString &sProductID, const QString &sParentSize, const QString &sSize)
{
    // handle method call com.deepin.defender.MonitorNetFlow.MergeDevSavingInfoToStr
    QString str;
    QMetaObject::invokeMethod(parent(), "MergeDevSavingInfoToStr", Q_RETURN_ARG(QString, str), Q_ARG(QString, sName), Q_ARG(QString, sStatus), Q_ARG(QString, sSerial), Q_ARG(QString, sVendorID), Q_ARG(QString, sProductID), Q_ARG(QString, sParentSize), Q_ARG(QString, sSize));
    return str;
}

void MonitorNetFlowAdaptor::RemoveFromWhiteLst(const QString &sName, const QString &sSerial, const QString &sVendorID, const QString &sProductID)
{
    // handle method call com.deepin.defender.MonitorNetFlow.RemoveFromWhiteLst
    QMetaObject::invokeMethod(parent(), "RemoveFromWhiteLst", Q_ARG(QString, sName), Q_ARG(QString, sSerial), Q_ARG(QString, sVendorID), Q_ARG(QString, sProductID));
}

void MonitorNetFlowAdaptor::SelectLimitationModel(const QString &sModel)
{
    // handle method call com.deepin.defender.MonitorNetFlow.SelectLimitationModel
    QMetaObject::invokeMethod(parent(), "SelectLimitationModel", Q_ARG(QString, sModel));
}

void MonitorNetFlowAdaptor::SetRightScanVisable(bool flag)
{
    // handle method call com.deepin.defender.MonitorNetFlow.SetRightScanVisable
    QMetaObject::invokeMethod(parent(), "SetRightScanVisable", Q_ARG(bool, flag));
}

void MonitorNetFlowAdaptor::StartApp()
{
    // handle method call com.deepin.defender.MonitorNetFlow.StartApp
    QMetaObject::invokeMethod(parent(), "StartApp");
}

void MonitorNetFlowAdaptor::WriteConnectionRecord(const QString &sName, const QString &sDatetime, const QString &sStatus, const QString &sSerial, const QString &sVendorID, const QString &sProductID, const QString &sParentSize, const QString &sSize)
{
    // handle method call com.deepin.defender.MonitorNetFlow.WriteConnectionRecord
    QMetaObject::invokeMethod(parent(), "WriteConnectionRecord", Q_ARG(QString, sName), Q_ARG(QString, sDatetime), Q_ARG(QString, sStatus), Q_ARG(QString, sSerial), Q_ARG(QString, sVendorID), Q_ARG(QString, sProductID), Q_ARG(QString, sParentSize), Q_ARG(QString, sSize));
}

void MonitorNetFlowAdaptor::WriteConnectionWhiteLst(const QString &sName, const QString &sDatetime, const QString &sStatus, const QString &sSerial, const QString &sVendorID, const QString &sProductID, const QString &sParentSize, const QString &sSize)
{
    // handle method call com.deepin.defender.MonitorNetFlow.WriteConnectionWhiteLst
    QMetaObject::invokeMethod(parent(), "WriteConnectionWhiteLst", Q_ARG(QString, sName), Q_ARG(QString, sDatetime), Q_ARG(QString, sStatus), Q_ARG(QString, sSerial), Q_ARG(QString, sVendorID), Q_ARG(QString, sProductID), Q_ARG(QString, sParentSize), Q_ARG(QString, sSize));
}

QString MonitorNetFlowAdaptor::getProExePath(const QString &sId)
{
    // handle method call com.deepin.defender.MonitorNetFlow.getProExePath
    QString value;
    QMetaObject::invokeMethod(parent(), "getProExePath", Q_RETURN_ARG(QString, value), Q_ARG(QString, sId));
    return value;
}

bool MonitorNetFlowAdaptor::getRemRegisterStatus()
{
    // handle method call com.deepin.defender.MonitorNetFlow.getRemRegisterStatus
    bool bStatus;
    QMetaObject::invokeMethod(parent(), "getRemRegisterStatus", Q_RETURN_ARG(bool, bStatus));
    return bStatus;
}

void MonitorNetFlowAdaptor::setRemRegisterStatus(bool bStatus)
{
    // handle method call com.deepin.defender.MonitorNetFlow.setRemRegisterStatus
    QMetaObject::invokeMethod(parent(), "setRemRegisterStatus", Q_ARG(bool, bStatus));
}

