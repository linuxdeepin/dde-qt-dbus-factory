/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.Authenticate.Fingerprint.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Authenticate.FingerprintAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Authenticate.Fingerprint.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Authenticate.FingerprintAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class FingerprintAdaptor
 */

FingerprintAdaptor::FingerprintAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

FingerprintAdaptor::~FingerprintAdaptor()
{
    // destructor
}

QString FingerprintAdaptor::defaultDevice() const
{
    // get the value of property DefaultDevice
    return qvariant_cast< QString >(parent()->property("DefaultDevice"));
}

QString FingerprintAdaptor::devices() const
{
    // get the value of property Devices
    return qvariant_cast< QString >(parent()->property("Devices"));
}

void FingerprintAdaptor::Claim(const QString &username, bool claimed)
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.Claim
    QMetaObject::invokeMethod(parent(), "Claim", Q_ARG(QString, username), Q_ARG(bool, claimed));
}

void FingerprintAdaptor::DeleteAllFingers(const QString &username)
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.DeleteAllFingers
    QMetaObject::invokeMethod(parent(), "DeleteAllFingers", Q_ARG(QString, username));
}

void FingerprintAdaptor::DeleteFinger(const QString &username, const QString &finger)
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.DeleteFinger
    QMetaObject::invokeMethod(parent(), "DeleteFinger", Q_ARG(QString, username), Q_ARG(QString, finger));
}

void FingerprintAdaptor::Enroll(const QString &finger)
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.Enroll
    QMetaObject::invokeMethod(parent(), "Enroll", Q_ARG(QString, finger));
}

QStringList FingerprintAdaptor::ListFingers(const QString &username)
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.ListFingers
    QStringList fingers;
    QMetaObject::invokeMethod(parent(), "ListFingers", Q_RETURN_ARG(QStringList, fingers), Q_ARG(QString, username));
    return fingers;
}

void FingerprintAdaptor::PreAuthEnroll()
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.PreAuthEnroll
    QMetaObject::invokeMethod(parent(), "PreAuthEnroll");
}

void FingerprintAdaptor::RenameFinger(const QString &username, const QString &finger, const QString &newName)
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.RenameFinger
    QMetaObject::invokeMethod(parent(), "RenameFinger", Q_ARG(QString, username), Q_ARG(QString, finger), Q_ARG(QString, newName));
}

void FingerprintAdaptor::SetDefaultDevice(const QString &device)
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.SetDefaultDevice
    QMetaObject::invokeMethod(parent(), "SetDefaultDevice", Q_ARG(QString, device));
}

void FingerprintAdaptor::StopEnroll()
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.StopEnroll
    QMetaObject::invokeMethod(parent(), "StopEnroll");
}

void FingerprintAdaptor::StopVerify()
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.StopVerify
    QMetaObject::invokeMethod(parent(), "StopVerify");
}

void FingerprintAdaptor::Verify(const QString &finger)
{
    // handle method call com.deepin.daemon.Authenticate.Fingerprint.Verify
    QMetaObject::invokeMethod(parent(), "Verify", Q_ARG(QString, finger));
}

