/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.InputDevice.TouchPad.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TouchPadAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TouchPad.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.TouchPadAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class TouchPadAdaptor
 */

TouchPadAdaptor::TouchPadAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

TouchPadAdaptor::~TouchPadAdaptor()
{
    // destructor
}

int TouchPadAdaptor::deltaScroll() const
{
    // get the value of property DeltaScroll
    return qvariant_cast< int >(parent()->property("DeltaScroll"));
}

void TouchPadAdaptor::setDeltaScroll(int value)
{
    // set the value of property DeltaScroll
    parent()->setProperty("DeltaScroll", QVariant::fromValue(value));
}

QString TouchPadAdaptor::deviceList() const
{
    // get the value of property DeviceList
    return qvariant_cast< QString >(parent()->property("DeviceList"));
}

bool TouchPadAdaptor::disableIfTyping() const
{
    // get the value of property DisableIfTyping
    return qvariant_cast< bool >(parent()->property("DisableIfTyping"));
}

void TouchPadAdaptor::setDisableIfTyping(bool value)
{
    // set the value of property DisableIfTyping
    parent()->setProperty("DisableIfTyping", QVariant::fromValue(value));
}

int TouchPadAdaptor::doubleClick() const
{
    // get the value of property DoubleClick
    return qvariant_cast< int >(parent()->property("DoubleClick"));
}

void TouchPadAdaptor::setDoubleClick(int value)
{
    // set the value of property DoubleClick
    parent()->setProperty("DoubleClick", QVariant::fromValue(value));
}

int TouchPadAdaptor::dragThreshold() const
{
    // get the value of property DragThreshold
    return qvariant_cast< int >(parent()->property("DragThreshold"));
}

void TouchPadAdaptor::setDragThreshold(int value)
{
    // set the value of property DragThreshold
    parent()->setProperty("DragThreshold", QVariant::fromValue(value));
}

bool TouchPadAdaptor::edgeScroll() const
{
    // get the value of property EdgeScroll
    return qvariant_cast< bool >(parent()->property("EdgeScroll"));
}

void TouchPadAdaptor::setEdgeScroll(bool value)
{
    // set the value of property EdgeScroll
    parent()->setProperty("EdgeScroll", QVariant::fromValue(value));
}

bool TouchPadAdaptor::exist() const
{
    // get the value of property Exist
    return qvariant_cast< bool >(parent()->property("Exist"));
}

bool TouchPadAdaptor::horizScroll() const
{
    // get the value of property HorizScroll
    return qvariant_cast< bool >(parent()->property("HorizScroll"));
}

void TouchPadAdaptor::setHorizScroll(bool value)
{
    // set the value of property HorizScroll
    parent()->setProperty("HorizScroll", QVariant::fromValue(value));
}

bool TouchPadAdaptor::leftHanded() const
{
    // get the value of property LeftHanded
    return qvariant_cast< bool >(parent()->property("LeftHanded"));
}

void TouchPadAdaptor::setLeftHanded(bool value)
{
    // set the value of property LeftHanded
    parent()->setProperty("LeftHanded", QVariant::fromValue(value));
}

double TouchPadAdaptor::motionAcceleration() const
{
    // get the value of property MotionAcceleration
    return qvariant_cast< double >(parent()->property("MotionAcceleration"));
}

void TouchPadAdaptor::setMotionAcceleration(double value)
{
    // set the value of property MotionAcceleration
    parent()->setProperty("MotionAcceleration", QVariant::fromValue(value));
}

double TouchPadAdaptor::motionScaling() const
{
    // get the value of property MotionScaling
    return qvariant_cast< double >(parent()->property("MotionScaling"));
}

void TouchPadAdaptor::setMotionScaling(double value)
{
    // set the value of property MotionScaling
    parent()->setProperty("MotionScaling", QVariant::fromValue(value));
}

double TouchPadAdaptor::motionThreshold() const
{
    // get the value of property MotionThreshold
    return qvariant_cast< double >(parent()->property("MotionThreshold"));
}

void TouchPadAdaptor::setMotionThreshold(double value)
{
    // set the value of property MotionThreshold
    parent()->setProperty("MotionThreshold", QVariant::fromValue(value));
}

bool TouchPadAdaptor::naturalScroll() const
{
    // get the value of property NaturalScroll
    return qvariant_cast< bool >(parent()->property("NaturalScroll"));
}

void TouchPadAdaptor::setNaturalScroll(bool value)
{
    // set the value of property NaturalScroll
    parent()->setProperty("NaturalScroll", QVariant::fromValue(value));
}

bool TouchPadAdaptor::palmDetect() const
{
    // get the value of property PalmDetect
    return qvariant_cast< bool >(parent()->property("PalmDetect"));
}

void TouchPadAdaptor::setPalmDetect(bool value)
{
    // set the value of property PalmDetect
    parent()->setProperty("PalmDetect", QVariant::fromValue(value));
}

int TouchPadAdaptor::palmMinWidth() const
{
    // get the value of property PalmMinWidth
    return qvariant_cast< int >(parent()->property("PalmMinWidth"));
}

void TouchPadAdaptor::setPalmMinWidth(int value)
{
    // set the value of property PalmMinWidth
    parent()->setProperty("PalmMinWidth", QVariant::fromValue(value));
}

int TouchPadAdaptor::palmMinZ() const
{
    // get the value of property PalmMinZ
    return qvariant_cast< int >(parent()->property("PalmMinZ"));
}

void TouchPadAdaptor::setPalmMinZ(int value)
{
    // set the value of property PalmMinZ
    parent()->setProperty("PalmMinZ", QVariant::fromValue(value));
}

bool TouchPadAdaptor::tPadEnable() const
{
    // get the value of property TPadEnable
    return qvariant_cast< bool >(parent()->property("TPadEnable"));
}

void TouchPadAdaptor::setTPadEnable(bool value)
{
    // set the value of property TPadEnable
    parent()->setProperty("TPadEnable", QVariant::fromValue(value));
}

bool TouchPadAdaptor::tapClick() const
{
    // get the value of property TapClick
    return qvariant_cast< bool >(parent()->property("TapClick"));
}

void TouchPadAdaptor::setTapClick(bool value)
{
    // set the value of property TapClick
    parent()->setProperty("TapClick", QVariant::fromValue(value));
}

bool TouchPadAdaptor::vertScroll() const
{
    // get the value of property VertScroll
    return qvariant_cast< bool >(parent()->property("VertScroll"));
}

void TouchPadAdaptor::setVertScroll(bool value)
{
    // set the value of property VertScroll
    parent()->setProperty("VertScroll", QVariant::fromValue(value));
}

void TouchPadAdaptor::Reset()
{
    // handle method call com.deepin.daemon.InputDevice.TouchPad.Reset
    QMetaObject::invokeMethod(parent(), "Reset");
}

