/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.defender.antiav.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.antiavAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.antiav.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.antiavAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class AntiavAdaptor
 */

AntiavAdaptor::AntiavAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

AntiavAdaptor::~AntiavAdaptor()
{
    // destructor
}

double AntiavAdaptor::globalRecv() const
{
    // get the value of property globalRecv
    return qvariant_cast< double >(parent()->property("globalRecv"));
}

void AntiavAdaptor::DoDissection(bool bAllDissection, const QString &sDissectionPath)
{
    // handle method call com.deepin.defender.antiav.DoDissection
    QMetaObject::invokeMethod(parent(), "DoDissection", Q_ARG(bool, bAllDissection), Q_ARG(QString, sDissectionPath));
}

void AntiavAdaptor::ExitApp()
{
    // handle method call com.deepin.defender.antiav.ExitApp
    QMetaObject::invokeMethod(parent(), "ExitApp");
}

int AntiavAdaptor::GetScanStatus()
{
    // handle method call com.deepin.defender.antiav.GetScanStatus
    int status;
    QMetaObject::invokeMethod(parent(), "GetScanStatus", Q_RETURN_ARG(int, status));
    return status;
}

void AntiavAdaptor::IsolationProblemFile(bool bFlag, const QString &sPath)
{
    // handle method call com.deepin.defender.antiav.IsolationProblemFile
    QMetaObject::invokeMethod(parent(), "IsolationProblemFile", Q_ARG(bool, bFlag), Q_ARG(QString, sPath));
}

void AntiavAdaptor::QueryIsolationFiles()
{
    // handle method call com.deepin.defender.antiav.QueryIsolationFiles
    QMetaObject::invokeMethod(parent(), "QueryIsolationFiles");
}

void AntiavAdaptor::QueryTrustFiles()
{
    // handle method call com.deepin.defender.antiav.QueryTrustFiles
    QMetaObject::invokeMethod(parent(), "QueryTrustFiles");
}

void AntiavAdaptor::QueryVersion()
{
    // handle method call com.deepin.defender.antiav.QueryVersion
    QMetaObject::invokeMethod(parent(), "QueryVersion");
}

void AntiavAdaptor::RepairProblemFile(const QString &sPath)
{
    // handle method call com.deepin.defender.antiav.RepairProblemFile
    QMetaObject::invokeMethod(parent(), "RepairProblemFile", Q_ARG(QString, sPath));
}

void AntiavAdaptor::SelectIsolationAreaSize()
{
    // handle method call com.deepin.defender.antiav.SelectIsolationAreaSize
    QMetaObject::invokeMethod(parent(), "SelectIsolationAreaSize");
}

void AntiavAdaptor::SelectTrustAreaSize()
{
    // handle method call com.deepin.defender.antiav.SelectTrustAreaSize
    QMetaObject::invokeMethod(parent(), "SelectTrustAreaSize");
}

void AntiavAdaptor::SetIsbInVirusScanningPage(bool isbOn)
{
    // handle method call com.deepin.defender.antiav.SetIsbInVirusScanningPage
    QMetaObject::invokeMethod(parent(), "SetIsbInVirusScanningPage", Q_ARG(bool, isbOn));
}

void AntiavAdaptor::SetScanFileSize(int nSize)
{
    // handle method call com.deepin.defender.antiav.SetScanFileSize
    QMetaObject::invokeMethod(parent(), "SetScanFileSize", Q_ARG(int, nSize));
}

void AntiavAdaptor::SetScanStatus(int status)
{
    // handle method call com.deepin.defender.antiav.SetScanStatus
    QMetaObject::invokeMethod(parent(), "SetScanStatus", Q_ARG(int, status));
}

void AntiavAdaptor::SetVriusUpdateAddress(const QString &address)
{
    // handle method call com.deepin.defender.antiav.SetVriusUpdateAddress
    QMetaObject::invokeMethod(parent(), "SetVriusUpdateAddress", Q_ARG(QString, address));
}

void AntiavAdaptor::StartApp()
{
    // handle method call com.deepin.defender.antiav.StartApp
    QMetaObject::invokeMethod(parent(), "StartApp");
}

void AntiavAdaptor::TrustProblemFile(bool bFlag, const QString &sPath)
{
    // handle method call com.deepin.defender.antiav.TrustProblemFile
    QMetaObject::invokeMethod(parent(), "TrustProblemFile", Q_ARG(bool, bFlag), Q_ARG(QString, sPath));
}

void AntiavAdaptor::UpdateVersion()
{
    // handle method call com.deepin.defender.antiav.UpdateVersion
    QMetaObject::invokeMethod(parent(), "UpdateVersion");
}

void AntiavAdaptor::backgroundUpdate()
{
    // handle method call com.deepin.defender.antiav.backgroundUpdate
    QMetaObject::invokeMethod(parent(), "backgroundUpdate");
}

void AntiavAdaptor::doDissection(bool bAllDissection, const QString &sDissectionPath)
{
    // handle method call com.deepin.defender.antiav.doDissection
    QMetaObject::invokeMethod(parent(), "doDissection", Q_ARG(bool, bAllDissection), Q_ARG(QString, sDissectionPath));
}

QString AntiavAdaptor::getVdbVersion()
{
    // handle method call com.deepin.defender.antiav.getVdbVersion
    QString version;
    QMetaObject::invokeMethod(parent(), "getVdbVersion", Q_RETURN_ARG(QString, version));
    return version;
}

bool AntiavAdaptor::isScanning()
{
    // handle method call com.deepin.defender.antiav.isScanning
    bool flag;
    QMetaObject::invokeMethod(parent(), "isScanning", Q_RETURN_ARG(bool, flag));
    return flag;
}

bool AntiavAdaptor::isTrueScanning()
{
    // handle method call com.deepin.defender.antiav.isTrueScanning
    bool flag;
    QMetaObject::invokeMethod(parent(), "isTrueScanning", Q_RETURN_ARG(bool, flag));
    return flag;
}

void AntiavAdaptor::preInitialize()
{
    // handle method call com.deepin.defender.antiav.preInitialize
    QMetaObject::invokeMethod(parent(), "preInitialize");
}

void AntiavAdaptor::queryReposeFile()
{
    // handle method call com.deepin.defender.antiav.queryReposeFile
    QMetaObject::invokeMethod(parent(), "queryReposeFile");
}

void AntiavAdaptor::querySepFile()
{
    // handle method call com.deepin.defender.antiav.querySepFile
    QMetaObject::invokeMethod(parent(), "querySepFile");
}

void AntiavAdaptor::queryVersion()
{
    // handle method call com.deepin.defender.antiav.queryVersion
    QMetaObject::invokeMethod(parent(), "queryVersion");
}

void AntiavAdaptor::repairProblemFile(const QString &sPath)
{
    // handle method call com.deepin.defender.antiav.repairProblemFile
    QMetaObject::invokeMethod(parent(), "repairProblemFile", Q_ARG(QString, sPath));
}

void AntiavAdaptor::reposeProblemFile(bool bFlag, const QString &sPath)
{
    // handle method call com.deepin.defender.antiav.reposeProblemFile
    QMetaObject::invokeMethod(parent(), "reposeProblemFile", Q_ARG(bool, bFlag), Q_ARG(QString, sPath));
}

void AntiavAdaptor::scanThreatsFile()
{
    // handle method call com.deepin.defender.antiav.scanThreatsFile
    QMetaObject::invokeMethod(parent(), "scanThreatsFile");
}

void AntiavAdaptor::sepProblemFile(bool bFlag, const QString &sPath)
{
    // handle method call com.deepin.defender.antiav.sepProblemFile
    QMetaObject::invokeMethod(parent(), "sepProblemFile", Q_ARG(bool, bFlag), Q_ARG(QString, sPath));
}

void AntiavAdaptor::setDissection(int eState)
{
    // handle method call com.deepin.defender.antiav.setDissection
    QMetaObject::invokeMethod(parent(), "setDissection", Q_ARG(int, eState));
}

void AntiavAdaptor::setScanStart()
{
    // handle method call com.deepin.defender.antiav.setScanStart
    QMetaObject::invokeMethod(parent(), "setScanStart");
}

void AntiavAdaptor::updateVersion()
{
    // handle method call com.deepin.defender.antiav.updateVersion
    QMetaObject::invokeMethod(parent(), "updateVersion");
}

