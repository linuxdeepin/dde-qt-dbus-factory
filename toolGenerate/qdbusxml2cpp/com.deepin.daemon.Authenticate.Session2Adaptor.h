/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.Authenticate.Session2.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Authenticate.Session2Adaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Authenticate.Session2.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DAEMON_AUTHENTICATE_SESSION2ADAPTOR_H
#define COM_DEEPIN_DAEMON_AUTHENTICATE_SESSION2ADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Authenticate.Session2.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.daemon.Authenticate.Session
 */
class SessionAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.daemon.Authenticate.Session")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.daemon.Authenticate.Session\">\n"
"    <property access=\"read\" type=\"b\" name=\"IsFuzzyMFA\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"IsMFA\"/>\n"
"    <property access=\"read\" type=\"a(iiib)\" name=\"FactorsInfo\">\n"
"      <annotation value=\"MFAInfoList\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"s\" name=\"Prompt\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"Username\"/>\n"
"    <property access=\"read\" type=\"i\" name=\"PINLen\"/>\n"
"    <signal name=\"Status\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"flag\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"status\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"msg\"/>\n"
"    </signal>\n"
"    <method name=\"End\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"flag\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"failNum\"/>\n"
"    </method>\n"
"    <method name=\"GetResult\">\n"
"      <arg direction=\"out\" type=\"i\" name=\"result\"/>\n"
"    </method>\n"
"    <method name=\"Quit\"/>\n"
"    <method name=\"SetQuitFlag\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"flag\"/>\n"
"    </method>\n"
"    <method name=\"SetSymmetricKey\">\n"
"      <arg direction=\"in\" type=\"ay\" name=\"key\"/>\n"
"    </method>\n"
"    <method name=\"SetToken\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"flag\"/>\n"
"      <arg direction=\"in\" type=\"ay\" name=\"token\"/>\n"
"    </method>\n"
"    <method name=\"Start\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"flag\"/>\n"
"      <arg direction=\"in\" type=\"i\" name=\"timeout\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"state\"/>\n"
"    </method>\n"
"    <method name=\"EncryptKey\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"encryptType\"/>\n"
"      <arg direction=\"in\" type=\"ai\" name=\"encryptMethod\"/>\n"
"      <annotation value=\"ArrayInt\" name=\"org.qtproject.QtDBus.QtTypeName.In1\"/>\n"
"      <arg direction=\"out\" type=\"i\" name=\"encryptType\"/>\n"
"      <arg direction=\"out\" type=\"ai\" name=\"encryptMethod\"/>\n"
"      <annotation value=\"ArrayInt\" name=\"org.qtproject.QtDBus.QtTypeName.Out1\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"publicKey\"/>\n"
"    </method>\n"
"    <method name=\"PrivilegesEnable\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"path\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"enabled\"/>\n"
"    </method>\n"
"    <method name=\"PrivilegesDisable\"/>\n"
"  </interface>\n"
        "")
public:
    SessionAdaptor(QObject *parent);
    virtual ~SessionAdaptor();

public: // PROPERTIES
    Q_PROPERTY(MFAInfoList FactorsInfo READ factorsInfo)
    MFAInfoList factorsInfo() const;

    Q_PROPERTY(bool IsFuzzyMFA READ isFuzzyMFA)
    bool isFuzzyMFA() const;

    Q_PROPERTY(bool IsMFA READ isMFA)
    bool isMFA() const;

    Q_PROPERTY(int PINLen READ pINLen)
    int pINLen() const;

    Q_PROPERTY(QString Prompt READ prompt)
    QString prompt() const;

    Q_PROPERTY(QString Username READ username)
    QString username() const;

public Q_SLOTS: // METHODS
    int EncryptKey(int encryptType, ArrayInt encryptMethod, ArrayInt &encryptMethod_, QString &publicKey);
    int End(int flag);
    int GetResult();
    void PrivilegesDisable();
    bool PrivilegesEnable(const QString &path);
    void Quit();
    void SetQuitFlag(int flag);
    void SetSymmetricKey(const QByteArray &key);
    void SetToken(int flag, const QByteArray &token);
    int Start(int flag, int timeout);
Q_SIGNALS: // SIGNALS
    void Status(int flag, int status, const QString &msg);
};

#endif
