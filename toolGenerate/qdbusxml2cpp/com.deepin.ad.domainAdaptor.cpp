/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.ad.domain.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.ad.domainAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.ad.domain.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.ad.domainAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ControlCenterAdaptor
 */

ControlCenterAdaptor::ControlCenterAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ControlCenterAdaptor::~ControlCenterAdaptor()
{
    // destructor
}

QString ControlCenterAdaptor::errorDetail() const
{
    // get the value of property errorDetail
    return qvariant_cast< QString >(parent()->property("errorDetail"));
}

bool ControlCenterAdaptor::isDemandReboot() const
{
    // get the value of property isDemandReboot
    return qvariant_cast< bool >(parent()->property("isDemandReboot"));
}

bool ControlCenterAdaptor::isDomainEnabled() const
{
    // get the value of property isDomainEnabled
    return qvariant_cast< bool >(parent()->property("isDomainEnabled"));
}

void ControlCenterAdaptor::setIsDomainEnabled(bool value)
{
    // set the value of property isDomainEnabled
    parent()->setProperty("isDomainEnabled", QVariant::fromValue(value));
}

bool ControlCenterAdaptor::isJoined() const
{
    // get the value of property isJoined
    return qvariant_cast< bool >(parent()->property("isJoined"));
}

bool ControlCenterAdaptor::isProcessing() const
{
    // get the value of property isProcessing
    return qvariant_cast< bool >(parent()->property("isProcessing"));
}

bool ControlCenterAdaptor::isServerValid() const
{
    // get the value of property isServerValid
    return qvariant_cast< bool >(parent()->property("isServerValid"));
}

bool ControlCenterAdaptor::checkIpv4(const QString &strIp)
{
    // handle method call com.deepin.AD.ControlCenter.checkIpv4
    bool out0;
    QMetaObject::invokeMethod(parent(), "checkIpv4", Q_RETURN_ARG(bool, out0), Q_ARG(QString, strIp));
    return out0;
}

void ControlCenterAdaptor::checkServer(const QString &strIp, int iPort)
{
    // handle method call com.deepin.AD.ControlCenter.checkServer
    QMetaObject::invokeMethod(parent(), "checkServer", Q_ARG(QString, strIp), Q_ARG(int, iPort));
}

void ControlCenterAdaptor::checkUser(int iAreaId, const QString &strAreaName, const QString &strUserName, const QString &strPassword)
{
    // handle method call com.deepin.AD.ControlCenter.checkUser
    QMetaObject::invokeMethod(parent(), "checkUser", Q_ARG(int, iAreaId), Q_ARG(QString, strAreaName), Q_ARG(QString, strUserName), Q_ARG(QString, strPassword));
}

void ControlCenterAdaptor::disableDomain()
{
    // handle method call com.deepin.AD.ControlCenter.disableDomain
    QMetaObject::invokeMethod(parent(), "disableDomain");
}

void ControlCenterAdaptor::enableDomain()
{
    // handle method call com.deepin.AD.ControlCenter.enableDomain
    QMetaObject::invokeMethod(parent(), "enableDomain");
}

void ControlCenterAdaptor::enableHttps()
{
    // handle method call com.deepin.AD.ControlCenter.enableHttps
    QMetaObject::invokeMethod(parent(), "enableHttps");
}

void ControlCenterAdaptor::exitDomain()
{
    // handle method call com.deepin.AD.ControlCenter.exitDomain
    QMetaObject::invokeMethod(parent(), "exitDomain");
}

void ControlCenterAdaptor::forceExitDomain()
{
    // handle method call com.deepin.AD.ControlCenter.forceExitDomain
    QMetaObject::invokeMethod(parent(), "forceExitDomain");
}

void ControlCenterAdaptor::joinDomain(const QString &strHostName)
{
    // handle method call com.deepin.AD.ControlCenter.joinDomain
    QMetaObject::invokeMethod(parent(), "joinDomain", Q_ARG(QString, strHostName));
}

void ControlCenterAdaptor::modifyPassword(const QString &strOldPassword, const QString &strNewPassword)
{
    // handle method call com.deepin.AD.ControlCenter.modifyPassword
    QMetaObject::invokeMethod(parent(), "modifyPassword", Q_ARG(QString, strOldPassword), Q_ARG(QString, strNewPassword));
}

QString ControlCenterAdaptor::passwordDemandTip()
{
    // handle method call com.deepin.AD.ControlCenter.passwordDemandTip
    QString out0;
    QMetaObject::invokeMethod(parent(), "passwordDemandTip", Q_RETURN_ARG(QString, out0));
    return out0;
}

void ControlCenterAdaptor::queryAreas(const QString &strSearchKey, int iPageIndex, int iPageSize)
{
    // handle method call com.deepin.AD.ControlCenter.queryAreas
    QMetaObject::invokeMethod(parent(), "queryAreas", Q_ARG(QString, strSearchKey), Q_ARG(int, iPageIndex), Q_ARG(int, iPageSize));
}

void ControlCenterAdaptor::queryIdentity()
{
    // handle method call com.deepin.AD.ControlCenter.queryIdentity
    QMetaObject::invokeMethod(parent(), "queryIdentity");
}

void ControlCenterAdaptor::reboot()
{
    // handle method call com.deepin.AD.ControlCenter.reboot
    QMetaObject::invokeMethod(parent(), "reboot");
}

