/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.Power.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.PowerAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Power.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DAEMON_POWERADAPTOR_H
#define COM_DEEPIN_DAEMON_POWERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.Power.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.daemon.Power
 */
class PowerAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.daemon.Power")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.daemon.Power\">\n"
"    <method name=\"Reset\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"BatteryLidClosedAction\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"AmbientLightAdjustBrightness\"/>\n"
"    <property access=\"read\" type=\"a{sd}\" name=\"BatteryPercentage\">\n"
"      <annotation value=\"BatteryPercentageInfo\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"LinePowerScreensaverDelay\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"LinePowerSleepDelay\"/>\n"
"    <property access=\"read\" type=\"u\" name=\"WarnLevel\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"HasAmbientLightSensor\"/>\n"
"    <property access=\"read\" type=\"a{sb}\" name=\"BatteryIsPresent\">\n"
"      <annotation value=\"BatteryPresentInfo\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"BatteryScreensaverDelay\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"BatteryScreenBlackDelay\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"BatterySleepDelay\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"ScreenBlackLock\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"LinePowerLidClosedAction\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"OnBattery\"/>\n"
"    <property access=\"read\" type=\"a{su}\" name=\"BatteryState\">\n"
"      <annotation value=\"BatteryStateInfo\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"LinePowerScreenBlackDelay\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"LidIsPresent\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"SleepLock\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"LidClosedSleep\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"LinePowerLockDelay\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"BatteryLockDelay\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"LinePowerPressPowerBtnAction\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"BatteryPressPowerBtnAction\"/>\n"
"    <property access=\"readwrite\" type=\"b\" name=\"LowPowerNotifyEnable\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"LowPowerNotifyThreshold\"/>\n"
"    <property access=\"readwrite\" type=\"i\" name=\"LowPowerAutoSleepThreshold\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"IsHighPerformanceSupported\"/>\n"
"  </interface>\n"
        "")
public:
    PowerAdaptor(QObject *parent);
    virtual ~PowerAdaptor();

public: // PROPERTIES
    Q_PROPERTY(bool AmbientLightAdjustBrightness READ ambientLightAdjustBrightness WRITE setAmbientLightAdjustBrightness)
    bool ambientLightAdjustBrightness() const;
    void setAmbientLightAdjustBrightness(bool value);

    Q_PROPERTY(BatteryPresentInfo BatteryIsPresent READ batteryIsPresent)
    BatteryPresentInfo batteryIsPresent() const;

    Q_PROPERTY(int BatteryLidClosedAction READ batteryLidClosedAction WRITE setBatteryLidClosedAction)
    int batteryLidClosedAction() const;
    void setBatteryLidClosedAction(int value);

    Q_PROPERTY(int BatteryLockDelay READ batteryLockDelay WRITE setBatteryLockDelay)
    int batteryLockDelay() const;
    void setBatteryLockDelay(int value);

    Q_PROPERTY(BatteryPercentageInfo BatteryPercentage READ batteryPercentage)
    BatteryPercentageInfo batteryPercentage() const;

    Q_PROPERTY(int BatteryPressPowerBtnAction READ batteryPressPowerBtnAction WRITE setBatteryPressPowerBtnAction)
    int batteryPressPowerBtnAction() const;
    void setBatteryPressPowerBtnAction(int value);

    Q_PROPERTY(int BatteryScreenBlackDelay READ batteryScreenBlackDelay WRITE setBatteryScreenBlackDelay)
    int batteryScreenBlackDelay() const;
    void setBatteryScreenBlackDelay(int value);

    Q_PROPERTY(int BatteryScreensaverDelay READ batteryScreensaverDelay WRITE setBatteryScreensaverDelay)
    int batteryScreensaverDelay() const;
    void setBatteryScreensaverDelay(int value);

    Q_PROPERTY(int BatterySleepDelay READ batterySleepDelay WRITE setBatterySleepDelay)
    int batterySleepDelay() const;
    void setBatterySleepDelay(int value);

    Q_PROPERTY(BatteryStateInfo BatteryState READ batteryState)
    BatteryStateInfo batteryState() const;

    Q_PROPERTY(bool HasAmbientLightSensor READ hasAmbientLightSensor)
    bool hasAmbientLightSensor() const;

    Q_PROPERTY(bool IsHighPerformanceSupported READ isHighPerformanceSupported)
    bool isHighPerformanceSupported() const;

    Q_PROPERTY(bool LidClosedSleep READ lidClosedSleep WRITE setLidClosedSleep)
    bool lidClosedSleep() const;
    void setLidClosedSleep(bool value);

    Q_PROPERTY(bool LidIsPresent READ lidIsPresent)
    bool lidIsPresent() const;

    Q_PROPERTY(int LinePowerLidClosedAction READ linePowerLidClosedAction WRITE setLinePowerLidClosedAction)
    int linePowerLidClosedAction() const;
    void setLinePowerLidClosedAction(int value);

    Q_PROPERTY(int LinePowerLockDelay READ linePowerLockDelay WRITE setLinePowerLockDelay)
    int linePowerLockDelay() const;
    void setLinePowerLockDelay(int value);

    Q_PROPERTY(int LinePowerPressPowerBtnAction READ linePowerPressPowerBtnAction WRITE setLinePowerPressPowerBtnAction)
    int linePowerPressPowerBtnAction() const;
    void setLinePowerPressPowerBtnAction(int value);

    Q_PROPERTY(int LinePowerScreenBlackDelay READ linePowerScreenBlackDelay WRITE setLinePowerScreenBlackDelay)
    int linePowerScreenBlackDelay() const;
    void setLinePowerScreenBlackDelay(int value);

    Q_PROPERTY(int LinePowerScreensaverDelay READ linePowerScreensaverDelay WRITE setLinePowerScreensaverDelay)
    int linePowerScreensaverDelay() const;
    void setLinePowerScreensaverDelay(int value);

    Q_PROPERTY(int LinePowerSleepDelay READ linePowerSleepDelay WRITE setLinePowerSleepDelay)
    int linePowerSleepDelay() const;
    void setLinePowerSleepDelay(int value);

    Q_PROPERTY(int LowPowerAutoSleepThreshold READ lowPowerAutoSleepThreshold WRITE setLowPowerAutoSleepThreshold)
    int lowPowerAutoSleepThreshold() const;
    void setLowPowerAutoSleepThreshold(int value);

    Q_PROPERTY(bool LowPowerNotifyEnable READ lowPowerNotifyEnable WRITE setLowPowerNotifyEnable)
    bool lowPowerNotifyEnable() const;
    void setLowPowerNotifyEnable(bool value);

    Q_PROPERTY(int LowPowerNotifyThreshold READ lowPowerNotifyThreshold WRITE setLowPowerNotifyThreshold)
    int lowPowerNotifyThreshold() const;
    void setLowPowerNotifyThreshold(int value);

    Q_PROPERTY(bool OnBattery READ onBattery)
    bool onBattery() const;

    Q_PROPERTY(bool ScreenBlackLock READ screenBlackLock WRITE setScreenBlackLock)
    bool screenBlackLock() const;
    void setScreenBlackLock(bool value);

    Q_PROPERTY(bool SleepLock READ sleepLock WRITE setSleepLock)
    bool sleepLock() const;
    void setSleepLock(bool value);

    Q_PROPERTY(uint WarnLevel READ warnLevel)
    uint warnLevel() const;

public Q_SLOTS: // METHODS
    void Reset();
Q_SIGNALS: // SIGNALS
};

#endif
