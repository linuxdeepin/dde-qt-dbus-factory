/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.defender.risantiav.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.risantiavAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.risantiav.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.defender.risantiavAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class RisantiavAdaptor
 */

RisantiavAdaptor::RisantiavAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

RisantiavAdaptor::~RisantiavAdaptor()
{
    // destructor
}

void RisantiavAdaptor::DoDissection(bool bAllDissection, const QString &sDissectionPath)
{
    // handle method call com.deepin.defender.risantiav.DoDissection
    QMetaObject::invokeMethod(parent(), "DoDissection", Q_ARG(bool, bAllDissection), Q_ARG(QString, sDissectionPath));
}

void RisantiavAdaptor::ExitApp()
{
    // handle method call com.deepin.defender.risantiav.ExitApp
    QMetaObject::invokeMethod(parent(), "ExitApp");
}

void RisantiavAdaptor::GetRisingLocalVersion()
{
    // handle method call com.deepin.defender.risantiav.GetRisingLocalVersion
    QMetaObject::invokeMethod(parent(), "GetRisingLocalVersion");
}

void RisantiavAdaptor::GetRisingSrvVersion()
{
    // handle method call com.deepin.defender.risantiav.GetRisingSrvVersion
    QMetaObject::invokeMethod(parent(), "GetRisingSrvVersion");
}

int RisantiavAdaptor::GetScanStatus()
{
    // handle method call com.deepin.defender.risantiav.GetScanStatus
    int status;
    QMetaObject::invokeMethod(parent(), "GetScanStatus", Q_RETURN_ARG(int, status));
    return status;
}

void RisantiavAdaptor::IsolationProblemFile(bool bFlag, const QString &sPath)
{
    // handle method call com.deepin.defender.risantiav.IsolationProblemFile
    QMetaObject::invokeMethod(parent(), "IsolationProblemFile", Q_ARG(bool, bFlag), Q_ARG(QString, sPath));
}

void RisantiavAdaptor::QueryIsolationFiles()
{
    // handle method call com.deepin.defender.risantiav.QueryIsolationFiles
    QMetaObject::invokeMethod(parent(), "QueryIsolationFiles");
}

void RisantiavAdaptor::QueryTrustFiles()
{
    // handle method call com.deepin.defender.risantiav.QueryTrustFiles
    QMetaObject::invokeMethod(parent(), "QueryTrustFiles");
}

void RisantiavAdaptor::RepairProblemFile(const QString &sPath)
{
    // handle method call com.deepin.defender.risantiav.RepairProblemFile
    QMetaObject::invokeMethod(parent(), "RepairProblemFile", Q_ARG(QString, sPath));
}

void RisantiavAdaptor::SelectIsolationAreaSize()
{
    // handle method call com.deepin.defender.risantiav.SelectIsolationAreaSize
    QMetaObject::invokeMethod(parent(), "SelectIsolationAreaSize");
}

void RisantiavAdaptor::SelectTrustAreaSize()
{
    // handle method call com.deepin.defender.risantiav.SelectTrustAreaSize
    QMetaObject::invokeMethod(parent(), "SelectTrustAreaSize");
}

void RisantiavAdaptor::SetScanFileSize(int nSize)
{
    // handle method call com.deepin.defender.risantiav.SetScanFileSize
    QMetaObject::invokeMethod(parent(), "SetScanFileSize", Q_ARG(int, nSize));
}

void RisantiavAdaptor::SetScanStatus(int status)
{
    // handle method call com.deepin.defender.risantiav.SetScanStatus
    QMetaObject::invokeMethod(parent(), "SetScanStatus", Q_ARG(int, status));
}

void RisantiavAdaptor::SetVriusUpdateAddress(const QString &address)
{
    // handle method call com.deepin.defender.risantiav.SetVriusUpdateAddress
    QMetaObject::invokeMethod(parent(), "SetVriusUpdateAddress", Q_ARG(QString, address));
}

void RisantiavAdaptor::StartApp()
{
    // handle method call com.deepin.defender.risantiav.StartApp
    QMetaObject::invokeMethod(parent(), "StartApp");
}

void RisantiavAdaptor::TrustProblemFile(bool bFlag, const QString &sPath)
{
    // handle method call com.deepin.defender.risantiav.TrustProblemFile
    QMetaObject::invokeMethod(parent(), "TrustProblemFile", Q_ARG(bool, bFlag), Q_ARG(QString, sPath));
}

void RisantiavAdaptor::UpdateVersion()
{
    // handle method call com.deepin.defender.risantiav.UpdateVersion
    QMetaObject::invokeMethod(parent(), "UpdateVersion");
}

