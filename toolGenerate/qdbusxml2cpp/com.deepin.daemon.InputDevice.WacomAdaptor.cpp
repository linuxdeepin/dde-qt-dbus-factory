/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.daemon.InputDevice.Wacom.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.WacomAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.Wacom.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.daemon.InputDevice.WacomAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class WacomAdaptor
 */

WacomAdaptor::WacomAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

WacomAdaptor::~WacomAdaptor()
{
    // destructor
}

WacomDeviceList WacomAdaptor::actionInfos() const
{
    // get the value of property ActionInfos
    return qvariant_cast< WacomDeviceList >(parent()->property("ActionInfos"));
}

bool WacomAdaptor::cursorMode() const
{
    // get the value of property CursorMode
    return qvariant_cast< bool >(parent()->property("CursorMode"));
}

void WacomAdaptor::setCursorMode(bool value)
{
    // set the value of property CursorMode
    parent()->setProperty("CursorMode", QVariant::fromValue(value));
}

QString WacomAdaptor::deviceList() const
{
    // get the value of property DeviceList
    return qvariant_cast< QString >(parent()->property("DeviceList"));
}

uint WacomAdaptor::eraserPressureSensitive() const
{
    // get the value of property EraserPressureSensitive
    return qvariant_cast< uint >(parent()->property("EraserPressureSensitive"));
}

void WacomAdaptor::setEraserPressureSensitive(uint value)
{
    // set the value of property EraserPressureSensitive
    parent()->setProperty("EraserPressureSensitive", QVariant::fromValue(value));
}

uint WacomAdaptor::eraserRawSample() const
{
    // get the value of property EraserRawSample
    return qvariant_cast< uint >(parent()->property("EraserRawSample"));
}

void WacomAdaptor::setEraserRawSample(uint value)
{
    // set the value of property EraserRawSample
    parent()->setProperty("EraserRawSample", QVariant::fromValue(value));
}

uint WacomAdaptor::eraserThreshold() const
{
    // get the value of property EraserThreshold
    return qvariant_cast< uint >(parent()->property("EraserThreshold"));
}

void WacomAdaptor::setEraserThreshold(uint value)
{
    // set the value of property EraserThreshold
    parent()->setProperty("EraserThreshold", QVariant::fromValue(value));
}

bool WacomAdaptor::exist() const
{
    // get the value of property Exist
    return qvariant_cast< bool >(parent()->property("Exist"));
}

QString WacomAdaptor::keyDownAction() const
{
    // get the value of property KeyDownAction
    return qvariant_cast< QString >(parent()->property("KeyDownAction"));
}

void WacomAdaptor::setKeyDownAction(const QString &value)
{
    // set the value of property KeyDownAction
    parent()->setProperty("KeyDownAction", QVariant::fromValue(value));
}

QString WacomAdaptor::keyUpAction() const
{
    // get the value of property KeyUpAction
    return qvariant_cast< QString >(parent()->property("KeyUpAction"));
}

void WacomAdaptor::setKeyUpAction(const QString &value)
{
    // set the value of property KeyUpAction
    parent()->setProperty("KeyUpAction", QVariant::fromValue(value));
}

bool WacomAdaptor::leftHanded() const
{
    // get the value of property LeftHanded
    return qvariant_cast< bool >(parent()->property("LeftHanded"));
}

void WacomAdaptor::setLeftHanded(bool value)
{
    // set the value of property LeftHanded
    parent()->setProperty("LeftHanded", QVariant::fromValue(value));
}

QString WacomAdaptor::mapOutput() const
{
    // get the value of property MapOutput
    return qvariant_cast< QString >(parent()->property("MapOutput"));
}

void WacomAdaptor::setMapOutput(const QString &value)
{
    // set the value of property MapOutput
    parent()->setProperty("MapOutput", QVariant::fromValue(value));
}

uint WacomAdaptor::stylusPressureSensitive() const
{
    // get the value of property StylusPressureSensitive
    return qvariant_cast< uint >(parent()->property("StylusPressureSensitive"));
}

void WacomAdaptor::setStylusPressureSensitive(uint value)
{
    // set the value of property StylusPressureSensitive
    parent()->setProperty("StylusPressureSensitive", QVariant::fromValue(value));
}

uint WacomAdaptor::stylusRawSample() const
{
    // get the value of property StylusRawSample
    return qvariant_cast< uint >(parent()->property("StylusRawSample"));
}

void WacomAdaptor::setStylusRawSample(uint value)
{
    // set the value of property StylusRawSample
    parent()->setProperty("StylusRawSample", QVariant::fromValue(value));
}

uint WacomAdaptor::stylusThreshold() const
{
    // get the value of property StylusThreshold
    return qvariant_cast< uint >(parent()->property("StylusThreshold"));
}

void WacomAdaptor::setStylusThreshold(uint value)
{
    // set the value of property StylusThreshold
    parent()->setProperty("StylusThreshold", QVariant::fromValue(value));
}

uint WacomAdaptor::suppress() const
{
    // get the value of property Suppress
    return qvariant_cast< uint >(parent()->property("Suppress"));
}

void WacomAdaptor::setSuppress(uint value)
{
    // set the value of property Suppress
    parent()->setProperty("Suppress", QVariant::fromValue(value));
}

void WacomAdaptor::Reset()
{
    // handle method call com.deepin.daemon.InputDevice.Wacom.Reset
    QMetaObject::invokeMethod(parent(), "Reset");
}

