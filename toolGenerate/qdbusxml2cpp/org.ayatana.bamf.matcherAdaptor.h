/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/org.ayatana.bamf.matcher.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/org.ayatana.bamf.matcherAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/org.ayatana.bamf.matcher.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef ORG_AYATANA_BAMF_MATCHERADAPTOR_H
#define ORG_AYATANA_BAMF_MATCHERADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/org.ayatana.bamf.matcher.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface org.ayatana.bamf.matcher
 */
class MatcherAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "org.ayatana.bamf.matcher")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"org.ayatana.bamf.matcher\">\n"
"    <method name=\"TabPaths\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"paths\"/>\n"
"    </method>\n"
"    <method name=\"RunningApplications\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"paths\"/>\n"
"    </method>\n"
"    <method name=\"RunningApplicationsDesktopFiles\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"paths\"/>\n"
"    </method>\n"
"    <method name=\"RegisterFavorites\">\n"
"      <arg direction=\"in\" type=\"as\" name=\"favorites\"/>\n"
"    </method>\n"
"    <method name=\"PathForApplication\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"desktop_file\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"path\"/>\n"
"    </method>\n"
"    <method name=\"WindowPaths\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"paths\"/>\n"
"    </method>\n"
"    <method name=\"ApplicationPaths\">\n"
"      <arg direction=\"out\" type=\"as\" name=\"paths\"/>\n"
"    </method>\n"
"    <method name=\"ApplicationIsRunning\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"desktop_file\"/>\n"
"      <arg direction=\"out\" type=\"b\" name=\"running\"/>\n"
"    </method>\n"
"    <method name=\"ApplicationForXid\">\n"
"      <arg direction=\"in\" type=\"u\" name=\"xid\"/>\n"
"      <arg direction=\"out\" type=\"s\" name=\"application\"/>\n"
"    </method>\n"
"    <method name=\"ActiveWindow\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"window\"/>\n"
"    </method>\n"
"    <method name=\"ActiveApplication\">\n"
"      <arg direction=\"out\" type=\"s\" name=\"application\"/>\n"
"    </method>\n"
"    <method name=\"WindowStackForMonitor\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"monitor_id\"/>\n"
"      <arg direction=\"out\" type=\"as\" name=\"window_list\"/>\n"
"    </method>\n"
"    <signal name=\"ActiveApplicationChanged\">\n"
"      <arg type=\"s\" name=\"old_app\"/>\n"
"      <arg type=\"s\" name=\"new_app\"/>\n"
"    </signal>\n"
"    <signal name=\"ActiveWindowChanged\">\n"
"      <arg type=\"s\" name=\"old_win\"/>\n"
"      <arg type=\"s\" name=\"new_win\"/>\n"
"    </signal>\n"
"    <signal name=\"ViewClosed\">\n"
"      <arg type=\"s\" name=\"path\"/>\n"
"      <arg type=\"s\" name=\"type\"/>\n"
"    </signal>\n"
"    <signal name=\"ViewOpened\">\n"
"      <arg type=\"s\" name=\"path\"/>\n"
"      <arg type=\"s\" name=\"type\"/>\n"
"    </signal>\n"
"    <signal name=\"StackingOrderChanged\"/>\n"
"    <signal name=\"RunningApplicationsChanged\">\n"
"      <arg type=\"as\" name=\"opened_desktop_files\"/>\n"
"      <arg type=\"as\" name=\"closed_desktop_files\"/>\n"
"    </signal>\n"
"  </interface>\n"
        "")
public:
    MatcherAdaptor(QObject *parent);
    virtual ~MatcherAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    QString ActiveApplication();
    QString ActiveWindow();
    QString ApplicationForXid(uint xid);
    bool ApplicationIsRunning(const QString &desktop_file);
    QStringList ApplicationPaths();
    QString PathForApplication(const QString &desktop_file);
    void RegisterFavorites(const QStringList &favorites);
    QStringList RunningApplications();
    QStringList RunningApplicationsDesktopFiles();
    QStringList TabPaths();
    QStringList WindowPaths();
    QStringList WindowStackForMonitor(int monitor_id);
Q_SIGNALS: // SIGNALS
    void ActiveApplicationChanged(const QString &old_app, const QString &new_app);
    void ActiveWindowChanged(const QString &old_win, const QString &new_win);
    void RunningApplicationsChanged(const QStringList &opened_desktop_files, const QStringList &closed_desktop_files);
    void StackingOrderChanged();
    void ViewClosed(const QString &path, const QString &type);
    void ViewOpened(const QString &path, const QString &type);
};

#endif
