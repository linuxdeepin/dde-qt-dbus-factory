/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp ./dde-qt-dbus-factory/xml/com.deepin.dde.daemon.Dock.Entry.xml -a ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.Dock.EntryAdaptor -i ./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.Dock.Entry.h
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef COM_DEEPIN_DDE_DAEMON_DOCK_ENTRYADAPTOR_H
#define COM_DEEPIN_DDE_DAEMON_DOCK_ENTRYADAPTOR_H

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
#include "./dde-qt-dbus-factory/toolGenerate/qdbusxml2cpp/com.deepin.dde.daemon.Dock.Entry.h"
QT_BEGIN_NAMESPACE
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;
QT_END_NAMESPACE

/*
 * Adaptor class for interface com.deepin.dde.daemon.Dock.Entry
 */
class EntryAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.deepin.dde.daemon.Dock.Entry")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.deepin.dde.daemon.Dock.Entry\">\n"
"    <method name=\"Activate\">\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"    </method>\n"
"    <method name=\"Check\"/>\n"
"    <method name=\"ForceQuit\"/>\n"
"    <method name=\"GetAllowedCloseWindows\">\n"
"      <annotation value=\"WindowList\" name=\"org.qtproject.QtDBus.QtTypeName.Out0\"/>\n"
"      <arg direction=\"out\" type=\"au\"/>\n"
"    </method>\n"
"    <method name=\"HandleDragDrop\">\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"      <arg direction=\"in\" type=\"as\"/>\n"
"    </method>\n"
"    <method name=\"HandleMenuItem\">\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"      <arg direction=\"in\" type=\"s\"/>\n"
"    </method>\n"
"    <method name=\"NewInstance\">\n"
"      <arg direction=\"in\" type=\"u\"/>\n"
"    </method>\n"
"    <method name=\"PresentWindows\"/>\n"
"    <method name=\"RequestDock\"/>\n"
"    <method name=\"RequestUndock\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"Id\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"IsActive\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"Name\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"Icon\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"Menu\"/>\n"
"    <property access=\"read\" type=\"s\" name=\"DesktopFile\"/>\n"
"    <property access=\"read\" type=\"a{u(sb)}\" name=\"WindowInfos\">\n"
"      <annotation value=\"WindowInfoMap\" name=\"org.qtproject.QtDBus.QtTypeName\"/>\n"
"    </property>\n"
"    <property access=\"read\" type=\"u\" name=\"CurrentWindow\"/>\n"
"    <property access=\"read\" type=\"b\" name=\"IsDocked\"/>\n"
"  </interface>\n"
        "")
public:
    EntryAdaptor(QObject *parent);
    virtual ~EntryAdaptor();

public: // PROPERTIES
    Q_PROPERTY(uint CurrentWindow READ currentWindow)
    uint currentWindow() const;

    Q_PROPERTY(QString DesktopFile READ desktopFile)
    QString desktopFile() const;

    Q_PROPERTY(QString Icon READ icon)
    QString icon() const;

    Q_PROPERTY(QString Id READ id)
    QString id() const;

    Q_PROPERTY(bool IsActive READ isActive)
    bool isActive() const;

    Q_PROPERTY(bool IsDocked READ isDocked)
    bool isDocked() const;

    Q_PROPERTY(QString Menu READ menu)
    QString menu() const;

    Q_PROPERTY(QString Name READ name)
    QString name() const;

    Q_PROPERTY(WindowInfoMap WindowInfos READ windowInfos)
    WindowInfoMap windowInfos() const;

public Q_SLOTS: // METHODS
    void Activate(uint in0);
    void Check();
    void ForceQuit();
    WindowList GetAllowedCloseWindows();
    void HandleDragDrop(uint in0, const QStringList &in1);
    void HandleMenuItem(uint in0, const QString &in1);
    void NewInstance(uint in0);
    void PresentWindows();
    void RequestDock();
    void RequestUndock();
Q_SIGNALS: // SIGNALS
};

#endif
